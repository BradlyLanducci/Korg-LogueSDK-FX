
build/SimpleDelay.elf:     file format elf32-littlearm


Disassembly of section .text:

20019048 <_text_start>:
20019048:	4770      	bx	lr

2001904a <_hook_resume>:
2001904a:	4770      	bx	lr
2001904c:	4770      	bx	lr

2001904e <_hook_suspend>:
2001904e:	4770      	bx	lr
20019050:	4770      	bx	lr

20019052 <_entry>:
20019052:	4b10      	ldr	r3, [pc, #64]	; (20019094 <_entry+0x42>)
20019054:	4a10      	ldr	r2, [pc, #64]	; (20019098 <_entry+0x46>)
20019056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2001905a:	4688      	mov	r8, r1
2001905c:	4607      	mov	r7, r0
2001905e:	2100      	movs	r1, #0
20019060:	4293      	cmp	r3, r2
20019062:	d002      	beq.n	2001906a <_entry+0x18>
20019064:	f803 1f01 	strb.w	r1, [r3, #1]!
20019068:	e7fa      	b.n	20019060 <_entry+0xe>
2001906a:	4b0c      	ldr	r3, [pc, #48]	; (2001909c <_entry+0x4a>)
2001906c:	4c0c      	ldr	r4, [pc, #48]	; (200190a0 <_entry+0x4e>)
2001906e:	1ae4      	subs	r4, r4, r3
20019070:	10a4      	asrs	r4, r4, #2
20019072:	2500      	movs	r5, #0
20019074:	461e      	mov	r6, r3
20019076:	42a5      	cmp	r5, r4
20019078:	d005      	beq.n	20019086 <_entry+0x34>
2001907a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2001907e:	b103      	cbz	r3, 20019082 <_entry+0x30>
20019080:	4798      	blx	r3
20019082:	3501      	adds	r5, #1
20019084:	e7f7      	b.n	20019076 <_entry+0x24>
20019086:	4641      	mov	r1, r8
20019088:	4638      	mov	r0, r7
2001908a:	f000 f80b 	bl	200190a4 <_hook_init>
2001908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20019092:	bf00      	nop
20019094:	2001924f 	.word	0x2001924f
20019098:	20019277 	.word	0x20019277
2001909c:	20019040 	.word	0x20019040
200190a0:	20019044 	.word	0x20019044

200190a4 <_hook_init>:
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190a4:	4915      	ldr	r1, [pc, #84]	; (200190fc <_hook_init+0x58>)
200190a6:	4a16      	ldr	r2, [pc, #88]	; (20019100 <_hook_init+0x5c>)
      mSize = nextpow2_u32(line_size); // must be power of 2
200190a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000

/*
  Give the s_delay_ram to s_delay object, instantiate variables
*/
void DELFX_INIT(uint32_t platform, uint32_t api)
{
200190ac:	b510      	push	{r4, lr}
200190ae:	608b      	str	r3, [r1, #8]
      mMask = (mSize-1);
200190b0:	3b01      	subs	r3, #1
200190b2:	60cb      	str	r3, [r1, #12]
      mWriteIdx = 0;
200190b4:	2300      	movs	r3, #0
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190b6:	600a      	str	r2, [r1, #0]
      mSize = nextpow2_u32(line_size); // must be power of 2
      mMask = (mSize-1);
      mWriteIdx = 0;
200190b8:	610b      	str	r3, [r1, #16]
200190ba:	460c      	mov	r4, r1
200190bc:	f102 0310 	add.w	r3, r2, #16
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
    REP4(*(ptr++) = 0);
200190c0:	2100      	movs	r1, #0
200190c2:	f102 1210 	add.w	r2, r2, #1048592	; 0x100010
200190c6:	f843 1c10 	str.w	r1, [r3, #-16]
200190ca:	f843 1c0c 	str.w	r1, [r3, #-12]
200190ce:	f843 1c08 	str.w	r1, [r3, #-8]
200190d2:	f843 1c04 	str.w	r1, [r3, #-4]
200190d6:	3310      	adds	r3, #16
static inline __attribute__((optimize("Ofast"),always_inline))
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
200190d8:	429a      	cmp	r2, r3
200190da:	d1f4      	bne.n	200190c6 <_hook_init+0x22>
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpm();
200190dc:	f000 f8b2 	bl	20019244 <___fx_get_bpm_veneer>
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190e0:	230a      	movs	r3, #10
*/
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpm();
200190e2:	6160      	str	r0, [r4, #20]
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190e4:	fb90 f0f3 	sdiv	r0, r0, r3
200190e8:	233c      	movs	r3, #60	; 0x3c
200190ea:	fb93 f0f0 	sdiv	r0, r3, r0
200190ee:	4b05      	ldr	r3, [pc, #20]	; (20019104 <_hook_init+0x60>)
200190f0:	4358      	muls	r0, r3
  s_mix = .5f;
200190f2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpm();
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190f6:	61a0      	str	r0, [r4, #24]
  s_mix = .5f;
200190f8:	61e3      	str	r3, [r4, #28]
200190fa:	bd10      	pop	{r4, pc}
200190fc:	20019250 	.word	0x20019250
20019100:	c0420000 	.word	0xc0420000
20019104:	00668a00 	.word	0x00668a00

20019108 <_hook_process>:
    return 1.5f * in - 0.5f * in *in * in;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
  const float dry = 1.f - s_mix;
20019108:	4b1d      	ldr	r3, [pc, #116]	; (20019180 <_hook_process+0x78>)
{
    return 1.5f * in - 0.5f * in *in * in;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
2001910a:	b5f0      	push	{r4, r5, r6, r7, lr}
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i=0;i<frames*2;i++)
  {
    const float delSample = gain * s_delay.read(s_len);
2001910c:	699a      	ldr	r2, [r3, #24]
    return 1.5f * in - 0.5f * in *in * in;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
  const float dry = 1.f - s_mix;
2001910e:	edd3 5a07 	vldr	s11, [r3, #28]
     * @param pos Offset from write index
     * @return Sample at given position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float read(const uint32_t pos) {
      return mLine[(mWriteIdx + pos) & mMask];
20019112:	681e      	ldr	r6, [r3, #0]
20019114:	68df      	ldr	r7, [r3, #12]
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i=0;i<frames*2;i++)
  {
    const float delSample = gain * s_delay.read(s_len);
20019116:	ed93 5a08 	vldr	s10, [r3, #32]
{
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i=0;i<frames*2;i++)
2001911a:	ea4f 0e41 	mov.w	lr, r1, lsl #1
2001911e:	6919      	ldr	r1, [r3, #16]
20019120:	2400      	movs	r4, #0
20019122:	eb02 0c01 	add.w	ip, r2, r1
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
    xn[i] = xn[i] + waveshape(wetXN);
20019126:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
2001912a:	eef7 6a08 	vmov.f32	s13, #120	; 0x3fc00000  1.5
{
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i=0;i<frames*2;i++)
2001912e:	4574      	cmp	r4, lr
20019130:	eba1 0204 	sub.w	r2, r1, r4
20019134:	d021      	beq.n	2001917a <_hook_process+0x72>
20019136:	ebc4 050c 	rsb	r5, r4, ip
2001913a:	403d      	ands	r5, r7
2001913c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
20019140:	ed95 7a00 	vldr	s14, [r5]
20019144:	ee25 7a07 	vmul.f32	s14, s10, s14
     *
     * @param s Sample to write
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void write(const float s) {
      mLine[(mWriteIdx--) & mMask] = s;
20019148:	403a      	ands	r2, r7
2001914a:	ee27 7a25 	vmul.f32	s14, s14, s11
2001914e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
    xn[i] = xn[i] + waveshape(wetXN);
20019152:	ee67 7a07 	vmul.f32	s15, s14, s14
  
  // Delay Algorithm //
  for (int i=0;i<frames*2;i++)
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
20019156:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    xn[i] = xn[i] + waveshape(wetXN);
2001915a:	ee67 7a87 	vmul.f32	s15, s15, s14
{
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i=0;i<frames*2;i++)
2001915e:	3401      	adds	r4, #1
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
    xn[i] = xn[i] + waveshape(wetXN);
20019160:	ee66 7a67 	vnmul.f32	s15, s12, s15
20019164:	eee7 7a26 	vfma.f32	s15, s14, s13
20019168:	ed90 7a00 	vldr	s14, [r0]
2001916c:	ee77 7a87 	vadd.f32	s15, s15, s14
20019170:	ece0 7a01 	vstmia	r0!, {s15}
20019174:	edc2 7a00 	vstr	s15, [r2]
{
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i=0;i<frames*2;i++)
20019178:	e7d9      	b.n	2001912e <_hook_process+0x26>
2001917a:	611a      	str	r2, [r3, #16]
2001917c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2001917e:	bf00      	nop
20019180:	20019250 	.word	0x20019250

20019184 <_hook_param>:
    s_delay.write(xn[i]);
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
20019184:	b508      	push	{r3, lr}
20019186:	ed2d 8b02 	vpush	{d8}
  const float valf = q31_to_f32(value);
2001918a:	ee08 1a10 	vmov	s16, r1
  switch (index) {
2001918e:	2801      	cmp	r0, #1
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
20019190:	eeba 8ae0 	vcvt.f32.s32	s16, s16, #31
  switch (index) {
20019194:	d011      	beq.n	200191ba <_hook_param+0x36>
20019196:	d305      	bcc.n	200191a4 <_hook_param+0x20>
20019198:	2803      	cmp	r0, #3
2001919a:	d13c      	bne.n	20019216 <_hook_param+0x92>
    }
    break;

  case 3:
    // Mix Val
    s_mix = valf;
2001919c:	4b1f      	ldr	r3, [pc, #124]	; (2001921c <_hook_param+0x98>)
2001919e:	ed83 8a07 	vstr	s16, [r3, #28]
    break;
  default:
    break;
  }
200191a2:	e038      	b.n	20019216 <_hook_param+0x92>
{
  const float valf = q31_to_f32(value);
  switch (index) {
  case 0:
    // Gain == Feedback //
    if (valf == 0.f) gain = 0.1f;
200191a4:	eeb5 8a40 	vcmp.f32	s16, #0.0
200191a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200191ac:	4b1b      	ldr	r3, [pc, #108]	; (2001921c <_hook_param+0x98>)
200191ae:	bf06      	itte	eq
200191b0:	4a1b      	ldreq	r2, [pc, #108]	; (20019220 <_hook_param+0x9c>)
200191b2:	621a      	streq	r2, [r3, #32]
    else gain = valf;
200191b4:	ed83 8a08 	vstrne	s16, [r3, #32]
200191b8:	e02d      	b.n	20019216 <_hook_param+0x92>
    break;
  case 1:

    bpm = _fx_get_bpm() / 10;
200191ba:	f000 f843 	bl	20019244 <___fx_get_bpm_veneer>
    // Calculate note intervals
    if (valf < 0.25) 
200191be:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
    if (valf == 0.f) gain = 0.1f;
    else gain = valf;
    break;
  case 1:

    bpm = _fx_get_bpm() / 10;
200191c2:	230a      	movs	r3, #10
    // Calculate note intervals
    if (valf < 0.25) 
200191c4:	eeb4 8ae7 	vcmpe.f32	s16, s15
    if (valf == 0.f) gain = 0.1f;
    else gain = valf;
    break;
  case 1:

    bpm = _fx_get_bpm() / 10;
200191c8:	fbb0 f0f3 	udiv	r0, r0, r3
200191cc:	4b13      	ldr	r3, [pc, #76]	; (2001921c <_hook_param+0x98>)
200191ce:	b280      	uxth	r0, r0
    // Calculate note intervals
    if (valf < 0.25) 
200191d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    if (valf == 0.f) gain = 0.1f;
    else gain = valf;
    break;
  case 1:

    bpm = _fx_get_bpm() / 10;
200191d4:	6158      	str	r0, [r3, #20]
    // Calculate note intervals
    if (valf < 0.25) 
200191d6:	d505      	bpl.n	200191e4 <_hook_param+0x60>
    {
      // Full note
      s_len = ((60 * 48000) / bpm) * 4;
200191d8:	4a12      	ldr	r2, [pc, #72]	; (20019224 <_hook_param+0xa0>)
200191da:	fb92 f0f0 	sdiv	r0, r2, r0
200191de:	0080      	lsls	r0, r0, #2
200191e0:	6198      	str	r0, [r3, #24]
200191e2:	e018      	b.n	20019216 <_hook_param+0x92>
    } 
    else if (valf < 0.5) 
200191e4:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
200191e8:	eeb4 8ae7 	vcmpe.f32	s16, s15
200191ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200191f0:	d505      	bpl.n	200191fe <_hook_param+0x7a>
    {
      // 1/2 note
      s_len = ((60 * 48000) / bpm) * 2;
200191f2:	4a0c      	ldr	r2, [pc, #48]	; (20019224 <_hook_param+0xa0>)
200191f4:	fb92 f0f0 	sdiv	r0, r2, r0
200191f8:	0040      	lsls	r0, r0, #1
200191fa:	6198      	str	r0, [r3, #24]
200191fc:	e00b      	b.n	20019216 <_hook_param+0x92>
    } 
    else if (valf < 0.75) 
200191fe:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
20019202:	eeb4 8ae7 	vcmpe.f32	s16, s15
20019206:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      // 1/4 note
      s_len = ((60 * 48000) / bpm);
2001920a:	bf4c      	ite	mi
2001920c:	4a05      	ldrmi	r2, [pc, #20]	; (20019224 <_hook_param+0xa0>)
    } 
    else 
    {
      // 1/8 note
      s_len = ((60 * 48000) / bpm) / 2;
2001920e:	4a06      	ldrpl	r2, [pc, #24]	; (20019228 <_hook_param+0xa4>)
20019210:	fb92 f0f0 	sdiv	r0, r2, r0
20019214:	6198      	str	r0, [r3, #24]
    s_mix = valf;
    break;
  default:
    break;
  }
20019216:	ecbd 8b02 	vpop	{d8}
2001921a:	bd08      	pop	{r3, pc}
2001921c:	20019250 	.word	0x20019250
20019220:	3dcccccd 	.word	0x3dcccccd
20019224:	002bf200 	.word	0x002bf200
20019228:	0015f900 	.word	0x0015f900

2001922c <_GLOBAL__sub_I_s_len>:
    DelayLine(void) :
      mLine(0),
      mFracZ(0),
      mSize(0),
      mMask(0),
      mWriteIdx(0)
2001922c:	4b04      	ldr	r3, [pc, #16]	; (20019240 <_GLOBAL__sub_I_s_len+0x14>)
2001922e:	2200      	movs	r2, #0
20019230:	2100      	movs	r1, #0
20019232:	601a      	str	r2, [r3, #0]
20019234:	6059      	str	r1, [r3, #4]
20019236:	609a      	str	r2, [r3, #8]
20019238:	60da      	str	r2, [r3, #12]
2001923a:	611a      	str	r2, [r3, #16]
2001923c:	4770      	bx	lr
2001923e:	bf00      	nop
20019240:	20019250 	.word	0x20019250

20019244 <___fx_get_bpm_veneer>:
20019244:	f85f f000 	ldr.w	pc, [pc]	; 20019248 <___fx_get_bpm_veneer+0x4>
20019248:	0807ca89 	.word	0x0807ca89
