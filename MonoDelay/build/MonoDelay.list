
build/MonoDelay.elf:     file format elf32-littlearm


Disassembly of section .text:

20019048 <_text_start>:
20019048:	4770      	bx	lr

2001904a <_hook_resume>:
2001904a:	4770      	bx	lr
2001904c:	4770      	bx	lr

2001904e <_hook_suspend>:
2001904e:	4770      	bx	lr
20019050:	4770      	bx	lr

20019052 <_entry>:
20019052:	4b10      	ldr	r3, [pc, #64]	; (20019094 <_entry+0x42>)
20019054:	4a10      	ldr	r2, [pc, #64]	; (20019098 <_entry+0x46>)
20019056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2001905a:	4688      	mov	r8, r1
2001905c:	4607      	mov	r7, r0
2001905e:	2100      	movs	r1, #0
20019060:	4293      	cmp	r3, r2
20019062:	d002      	beq.n	2001906a <_entry+0x18>
20019064:	f803 1f01 	strb.w	r1, [r3, #1]!
20019068:	e7fa      	b.n	20019060 <_entry+0xe>
2001906a:	4b0c      	ldr	r3, [pc, #48]	; (2001909c <_entry+0x4a>)
2001906c:	4c0c      	ldr	r4, [pc, #48]	; (200190a0 <_entry+0x4e>)
2001906e:	1ae4      	subs	r4, r4, r3
20019070:	10a4      	asrs	r4, r4, #2
20019072:	2500      	movs	r5, #0
20019074:	461e      	mov	r6, r3
20019076:	42a5      	cmp	r5, r4
20019078:	d005      	beq.n	20019086 <_entry+0x34>
2001907a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2001907e:	b103      	cbz	r3, 20019082 <_entry+0x30>
20019080:	4798      	blx	r3
20019082:	3501      	adds	r5, #1
20019084:	e7f7      	b.n	20019076 <_entry+0x24>
20019086:	4641      	mov	r1, r8
20019088:	4638      	mov	r0, r7
2001908a:	f000 f80b 	bl	200190a4 <_hook_init>
2001908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20019092:	bf00      	nop
20019094:	200192b7 	.word	0x200192b7
20019098:	200192df 	.word	0x200192df
2001909c:	20019040 	.word	0x20019040
200190a0:	20019044 	.word	0x20019044

200190a4 <_hook_init>:
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190a4:	4915      	ldr	r1, [pc, #84]	; (200190fc <_hook_init+0x58>)
200190a6:	4a16      	ldr	r2, [pc, #88]	; (20019100 <_hook_init+0x5c>)
      mSize = nextpow2_u32(line_size); // must be power of 2
200190a8:	f44f 2380 	mov.w	r3, #262144	; 0x40000

/*
  Give the s_delay_ram to s_delay object, instantiate variables
*/
void DELFX_INIT(uint32_t platform, uint32_t api)
{
200190ac:	b510      	push	{r4, lr}
200190ae:	608b      	str	r3, [r1, #8]
      mMask = (mSize-1);
200190b0:	3b01      	subs	r3, #1
200190b2:	60cb      	str	r3, [r1, #12]
      mWriteIdx = 0;
200190b4:	2300      	movs	r3, #0
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190b6:	600a      	str	r2, [r1, #0]
      mSize = nextpow2_u32(line_size); // must be power of 2
      mMask = (mSize-1);
      mWriteIdx = 0;
200190b8:	610b      	str	r3, [r1, #16]
200190ba:	460c      	mov	r4, r1
200190bc:	f102 0310 	add.w	r3, r2, #16
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
    REP4(*(ptr++) = 0);
200190c0:	2100      	movs	r1, #0
200190c2:	f102 1210 	add.w	r2, r2, #1048592	; 0x100010
200190c6:	f843 1c10 	str.w	r1, [r3, #-16]
200190ca:	f843 1c0c 	str.w	r1, [r3, #-12]
200190ce:	f843 1c08 	str.w	r1, [r3, #-8]
200190d2:	f843 1c04 	str.w	r1, [r3, #-4]
200190d6:	3310      	adds	r3, #16
static inline __attribute__((optimize("Ofast"),always_inline))
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
200190d8:	429a      	cmp	r2, r3
200190da:	d1f4      	bne.n	200190c6 <_hook_init+0x22>
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpm();
200190dc:	f000 f8e8 	bl	200192b0 <___fx_get_bpm_veneer>
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190e0:	230a      	movs	r3, #10
*/
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpm();
200190e2:	6160      	str	r0, [r4, #20]
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190e4:	fb90 f0f3 	sdiv	r0, r0, r3
200190e8:	233c      	movs	r3, #60	; 0x3c
200190ea:	fb93 f0f0 	sdiv	r0, r3, r0
200190ee:	4b05      	ldr	r3, [pc, #20]	; (20019104 <_hook_init+0x60>)
200190f0:	4358      	muls	r0, r3
  s_mix = .5f;
200190f2:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpm();
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190f6:	61a0      	str	r0, [r4, #24]
  s_mix = .5f;
200190f8:	61e3      	str	r3, [r4, #28]
200190fa:	bd10      	pop	{r4, pc}
200190fc:	200192b8 	.word	0x200192b8
20019100:	c0420000 	.word	0xc0420000
20019104:	00668a00 	.word	0x00668a00

20019108 <_hook_process>:
    return 1.5f * in - 0.5f * in *in * in;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
  const float dry = 1.f - s_mix;
20019108:	4b34      	ldr	r3, [pc, #208]	; (200191dc <_hook_process+0xd4>)
  // Delay Algorithm //
  for (int i = 0; i < frames * 2; i++)
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
    xn[i] = xn[i] + fastertanhf(waveshape(wetXN));
2001910a:	eddf 2a35 	vldr	s5, [pc, #212]	; 200191e0 <_hook_process+0xd8>
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i = 0; i < frames * 2; i++)
  {
    const float delSample = gain * s_delay.read(s_len);
2001910e:	699a      	ldr	r2, [r3, #24]
    return 1.5f * in - 0.5f * in *in * in;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
  const float dry = 1.f - s_mix;
20019110:	ed93 2a07 	vldr	s4, [r3, #28]
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i = 0; i < frames * 2; i++)
  {
    const float delSample = gain * s_delay.read(s_len);
20019114:	edd3 1a08 	vldr	s3, [r3, #32]
    wetXN = wet * delSample;
    xn[i] = xn[i] + fastertanhf(waveshape(wetXN));
20019118:	ed9f 3a32 	vldr	s6, [pc, #200]	; 200191e4 <_hook_process+0xdc>
2001911c:	eddf 3a32 	vldr	s7, [pc, #200]	; 200191e8 <_hook_process+0xe0>
20019120:	ed9f 4a32 	vldr	s8, [pc, #200]	; 200191ec <_hook_process+0xe4>
20019124:	eddf 4a32 	vldr	s9, [pc, #200]	; 200191f0 <_hook_process+0xe8>
20019128:	ed9f 5a32 	vldr	s10, [pc, #200]	; 200191f4 <_hook_process+0xec>
2001912c:	eddf 5a32 	vldr	s11, [pc, #200]	; 200191f8 <_hook_process+0xf0>
20019130:	ed9f 6a32 	vldr	s12, [pc, #200]	; 200191fc <_hook_process+0xf4>
{
    return 1.5f * in - 0.5f * in *in * in;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
20019134:	b5f0      	push	{r4, r5, r6, r7, lr}
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i = 0; i < frames * 2; i++)
20019136:	ea4f 0e41 	mov.w	lr, r1, lsl #1
2001913a:	6919      	ldr	r1, [r3, #16]
     * @param pos Offset from write index
     * @return Sample at given position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float read(const uint32_t pos) {
      return mLine[(mWriteIdx + pos) & mMask];
2001913c:	681e      	ldr	r6, [r3, #0]
2001913e:	68df      	ldr	r7, [r3, #12]
20019140:	2400      	movs	r4, #0
20019142:	eb02 0c01 	add.w	ip, r2, r1
20019146:	4574      	cmp	r4, lr
20019148:	eba1 0204 	sub.w	r2, r1, r4
2001914c:	d043      	beq.n	200191d6 <_hook_process+0xce>
2001914e:	ebc4 050c 	rsb	r5, r4, ip
20019152:	403d      	ands	r5, r7
20019154:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
20019158:	edd5 6a00 	vldr	s13, [r5]
2001915c:	ee61 6aa6 	vmul.f32	s13, s3, s13
  s_mix = .5f;
}

float __fast_inline waveshape(float in) 
{
    return 1.5f * in - 0.5f * in *in * in;
20019160:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
  
  // Delay Algorithm //
  for (int i = 0; i < frames * 2; i++)
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
20019164:	ee66 6a82 	vmul.f32	s13, s13, s4
    xn[i] = xn[i] + fastertanhf(waveshape(wetXN));
20019168:	eeb0 1a65 	vmov.f32	s2, s11
  s_mix = .5f;
}

float __fast_inline waveshape(float in) 
{
    return 1.5f * in - 0.5f * in *in * in;
2001916c:	ee66 7aa6 	vmul.f32	s15, s13, s13
  
  // Delay Algorithm //
  for (int i = 0; i < frames * 2; i++)
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
20019170:	edc3 6a09 	vstr	s13, [r3, #36]	; 0x24
  s_mix = .5f;
}

float __fast_inline waveshape(float in) 
{
    return 1.5f * in - 0.5f * in *in * in;
20019174:	ee67 7aa6 	vmul.f32	s15, s15, s13
     *
     * @param s Sample to write
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void write(const float s) {
      mLine[(mWriteIdx--) & mMask] = s;
20019178:	403a      	ands	r2, r7
2001917a:	ee67 7a67 	vnmul.f32	s15, s14, s15
2001917e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
20019182:	eee6 7a87 	vfma.f32	s15, s13, s14
20019186:	eb06 0282 	add.w	r2, r6, r2, lsl #2
{
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i = 0; i < frames * 2; i++)
2001918a:	3401      	adds	r4, #1
  {
    const float delSample = gain * s_delay.read(s_len);
    wetXN = wet * delSample;
    xn[i] = xn[i] + fastertanhf(waveshape(wetXN));
2001918c:	eeb0 7a43 	vmov.f32	s14, s6
20019190:	eea7 7aa2 	vfma.f32	s14, s15, s5
20019194:	eef0 6a63 	vmov.f32	s13, s7
20019198:	eee7 6a27 	vfma.f32	s13, s14, s15
2001919c:	eeb0 7a66 	vmov.f32	s14, s13
200191a0:	eef0 6a44 	vmov.f32	s13, s8
200191a4:	eee7 6a27 	vfma.f32	s13, s14, s15
200191a8:	eeb0 7a45 	vmov.f32	s14, s10
200191ac:	eea7 7aa4 	vfma.f32	s14, s15, s9
200191b0:	eea7 1a27 	vfma.f32	s2, s14, s15
200191b4:	eeb0 7a41 	vmov.f32	s14, s2
200191b8:	eeb0 1a46 	vmov.f32	s2, s12
200191bc:	eea7 1a27 	vfma.f32	s2, s14, s15
200191c0:	ed90 7a00 	vldr	s14, [r0]
200191c4:	eec6 7a81 	vdiv.f32	s15, s13, s2
200191c8:	ee77 7a87 	vadd.f32	s15, s15, s14
200191cc:	ece0 7a01 	vstmia	r0!, {s15}
200191d0:	edc2 7a00 	vstr	s15, [r2]
{
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  
  // Delay Algorithm //
  for (int i = 0; i < frames * 2; i++)
200191d4:	e7b7      	b.n	20019146 <_hook_process+0x3e>
200191d6:	611a      	str	r2, [r3, #16]
200191d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
200191da:	bf00      	nop
200191dc:	200192b8 	.word	0x200192b8
200191e0:	3d098436 	.word	0x3d098436
200191e4:	3d6f1472 	.word	0x3d6f1472
200191e8:	3e7cbd0c 	.word	0x3e7cbd0c
200191ec:	b6e247c8 	.word	0xb6e247c8
200191f0:	3ceb7eff 	.word	0x3ceb7eff
200191f4:	3dde744d 	.word	0x3dde744d
200191f8:	3d7996af 	.word	0x3d7996af
200191fc:	3e7c6675 	.word	0x3e7c6675

20019200 <_hook_param>:
    s_delay.write(xn[i]);
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
20019200:	b508      	push	{r3, lr}
20019202:	ed2d 8b02 	vpush	{d8}
  const float valf = q31_to_f32(value);
20019206:	ee08 1a10 	vmov	s16, r1
  switch (index) {
2001920a:	2801      	cmp	r0, #1
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
2001920c:	eeba 8ae0 	vcvt.f32.s32	s16, s16, #31
  switch (index) {
20019210:	d00a      	beq.n	20019228 <_hook_param+0x28>
20019212:	d305      	bcc.n	20019220 <_hook_param+0x20>
20019214:	2803      	cmp	r0, #3
20019216:	d135      	bne.n	20019284 <_hook_param+0x84>
    }
    break;

  case 3:
    // Mix Val
    s_mix = valf;
20019218:	4b1c      	ldr	r3, [pc, #112]	; (2001928c <_hook_param+0x8c>)
2001921a:	ed83 8a07 	vstr	s16, [r3, #28]
    break;
  default:
    break;
  }
2001921e:	e031      	b.n	20019284 <_hook_param+0x84>
{
  const float valf = q31_to_f32(value);
  switch (index) {
  case 0:
    // Gain == Feedback //
    gain = valf;
20019220:	4b1a      	ldr	r3, [pc, #104]	; (2001928c <_hook_param+0x8c>)
20019222:	ed83 8a08 	vstr	s16, [r3, #32]
    break;
20019226:	e02d      	b.n	20019284 <_hook_param+0x84>
  case 1:

    bpm = _fx_get_bpm() / 10;
20019228:	f000 f842 	bl	200192b0 <___fx_get_bpm_veneer>
    // Calculate note intervals
    if (valf < 0.25) 
2001922c:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
    // Gain == Feedback //
    gain = valf;
    break;
  case 1:

    bpm = _fx_get_bpm() / 10;
20019230:	230a      	movs	r3, #10
    // Calculate note intervals
    if (valf < 0.25) 
20019232:	eeb4 8ae7 	vcmpe.f32	s16, s15
    // Gain == Feedback //
    gain = valf;
    break;
  case 1:

    bpm = _fx_get_bpm() / 10;
20019236:	fbb0 f0f3 	udiv	r0, r0, r3
2001923a:	4b14      	ldr	r3, [pc, #80]	; (2001928c <_hook_param+0x8c>)
2001923c:	b280      	uxth	r0, r0
    // Calculate note intervals
    if (valf < 0.25) 
2001923e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    // Gain == Feedback //
    gain = valf;
    break;
  case 1:

    bpm = _fx_get_bpm() / 10;
20019242:	6158      	str	r0, [r3, #20]
    // Calculate note intervals
    if (valf < 0.25) 
20019244:	d505      	bpl.n	20019252 <_hook_param+0x52>
    {
      // Full note
      s_len = ((60 * 48000) / bpm) * 4;
20019246:	4a12      	ldr	r2, [pc, #72]	; (20019290 <_hook_param+0x90>)
20019248:	fb92 f0f0 	sdiv	r0, r2, r0
2001924c:	0080      	lsls	r0, r0, #2
2001924e:	6198      	str	r0, [r3, #24]
20019250:	e018      	b.n	20019284 <_hook_param+0x84>
    } 
    else if (valf < 0.5) 
20019252:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
20019256:	eeb4 8ae7 	vcmpe.f32	s16, s15
2001925a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2001925e:	d505      	bpl.n	2001926c <_hook_param+0x6c>
    {
      // 1/2 note
      s_len = ((60 * 48000) / bpm) * 2;
20019260:	4a0b      	ldr	r2, [pc, #44]	; (20019290 <_hook_param+0x90>)
20019262:	fb92 f0f0 	sdiv	r0, r2, r0
20019266:	0040      	lsls	r0, r0, #1
20019268:	6198      	str	r0, [r3, #24]
2001926a:	e00b      	b.n	20019284 <_hook_param+0x84>
    } 
    else if (valf < 0.75) 
2001926c:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
20019270:	eeb4 8ae7 	vcmpe.f32	s16, s15
20019274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      // 1/4 note
      s_len = ((60 * 48000) / bpm);
20019278:	bf4c      	ite	mi
2001927a:	4a05      	ldrmi	r2, [pc, #20]	; (20019290 <_hook_param+0x90>)
    } 
    else 
    {
      // 1/8 note
      s_len = ((60 * 48000) / bpm) / 2;
2001927c:	4a05      	ldrpl	r2, [pc, #20]	; (20019294 <_hook_param+0x94>)
2001927e:	fb92 f0f0 	sdiv	r0, r2, r0
20019282:	6198      	str	r0, [r3, #24]
    s_mix = valf;
    break;
  default:
    break;
  }
20019284:	ecbd 8b02 	vpop	{d8}
20019288:	bd08      	pop	{r3, pc}
2001928a:	bf00      	nop
2001928c:	200192b8 	.word	0x200192b8
20019290:	002bf200 	.word	0x002bf200
20019294:	0015f900 	.word	0x0015f900

20019298 <_GLOBAL__sub_I_s_len>:
    DelayLine(void) :
      mLine(0),
      mFracZ(0),
      mSize(0),
      mMask(0),
      mWriteIdx(0)
20019298:	4b04      	ldr	r3, [pc, #16]	; (200192ac <_GLOBAL__sub_I_s_len+0x14>)
2001929a:	2200      	movs	r2, #0
2001929c:	2100      	movs	r1, #0
2001929e:	601a      	str	r2, [r3, #0]
200192a0:	6059      	str	r1, [r3, #4]
200192a2:	609a      	str	r2, [r3, #8]
200192a4:	60da      	str	r2, [r3, #12]
200192a6:	611a      	str	r2, [r3, #16]
200192a8:	4770      	bx	lr
200192aa:	bf00      	nop
200192ac:	200192b8 	.word	0x200192b8

200192b0 <___fx_get_bpm_veneer>:
200192b0:	f85f f000 	ldr.w	pc, [pc]	; 200192b4 <___fx_get_bpm_veneer+0x4>
200192b4:	0807ca89 	.word	0x0807ca89
