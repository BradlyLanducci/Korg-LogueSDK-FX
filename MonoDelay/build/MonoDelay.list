
build/MonoDelay.elf:     file format elf32-littlearm


Disassembly of section .text:

20019048 <_text_start>:
20019048:	4770      	bx	lr

2001904a <_hook_resume>:
2001904a:	4770      	bx	lr
2001904c:	4770      	bx	lr

2001904e <_hook_suspend>:
2001904e:	4770      	bx	lr
20019050:	4770      	bx	lr

20019052 <_entry>:
20019052:	4b10      	ldr	r3, [pc, #64]	; (20019094 <_entry+0x42>)
20019054:	4a10      	ldr	r2, [pc, #64]	; (20019098 <_entry+0x46>)
20019056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2001905a:	4688      	mov	r8, r1
2001905c:	4607      	mov	r7, r0
2001905e:	2100      	movs	r1, #0
20019060:	4293      	cmp	r3, r2
20019062:	d002      	beq.n	2001906a <_entry+0x18>
20019064:	f803 1f01 	strb.w	r1, [r3, #1]!
20019068:	e7fa      	b.n	20019060 <_entry+0xe>
2001906a:	4b0c      	ldr	r3, [pc, #48]	; (2001909c <_entry+0x4a>)
2001906c:	4c0c      	ldr	r4, [pc, #48]	; (200190a0 <_entry+0x4e>)
2001906e:	1ae4      	subs	r4, r4, r3
20019070:	10a4      	asrs	r4, r4, #2
20019072:	2500      	movs	r5, #0
20019074:	461e      	mov	r6, r3
20019076:	42a5      	cmp	r5, r4
20019078:	d005      	beq.n	20019086 <_entry+0x34>
2001907a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2001907e:	b103      	cbz	r3, 20019082 <_entry+0x30>
20019080:	4798      	blx	r3
20019082:	3501      	adds	r5, #1
20019084:	e7f7      	b.n	20019076 <_entry+0x24>
20019086:	4641      	mov	r1, r8
20019088:	4638      	mov	r0, r7
2001908a:	f000 f851 	bl	20019130 <_hook_init>
2001908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20019092:	bf00      	nop
20019094:	2001939f 	.word	0x2001939f
20019098:	200193cf 	.word	0x200193cf
2001909c:	20019040 	.word	0x20019040
200190a0:	20019044 	.word	0x20019044

200190a4 <_Z13calculate_lenf>:
{
    return 1.5f * in - 0.5f * in *in * in;
}

void calculate_len(float bpm_valf)
{
200190a4:	b510      	push	{r4, lr}
    if (bpm_valf < 0.25f) 
200190a6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
200190aa:	eeb4 0ae7 	vcmpe.f32	s0, s15
200190ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
    return 1.5f * in - 0.5f * in *in * in;
}

void calculate_len(float bpm_valf)
{
200190b2:	ed2d 8b02 	vpush	{d8}
200190b6:	4c1c      	ldr	r4, [pc, #112]	; (20019128 <_Z13calculate_lenf+0x84>)
200190b8:	ed9f 8a1c 	vldr	s16, [pc, #112]	; 2001912c <_Z13calculate_lenf+0x88>
    if (bpm_valf < 0.25f) 
200190bc:	d50a      	bpl.n	200190d4 <_Z13calculate_lenf+0x30>
    {
      // Full note
      s_len = (60 * k_samplerate / _fx_get_bpmf()) * 4.f;
200190be:	f000 f96b 	bl	20019398 <___fx_get_bpmf_veneer>
200190c2:	ee88 0a00 	vdiv.f32	s0, s16, s0
200190c6:	eef1 7a00 	vmov.f32	s15, #16	; 0x40800000  4.0
200190ca:	ee20 0a27 	vmul.f32	s0, s0, s15
200190ce:	ed84 0a00 	vstr	s0, [r4]
200190d2:	e025      	b.n	20019120 <_Z13calculate_lenf+0x7c>
    } 
    else if (bpm_valf < 0.5f) 
200190d4:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
200190d8:	eeb4 0ae8 	vcmpe.f32	s0, s17
200190dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200190e0:	d508      	bpl.n	200190f4 <_Z13calculate_lenf+0x50>
    {
      // 1/2 note
      s_len = ((60 * k_samplerate) / _fx_get_bpmf()) * 2.f;
200190e2:	f000 f959 	bl	20019398 <___fx_get_bpmf_veneer>
200190e6:	ee88 0a00 	vdiv.f32	s0, s16, s0
200190ea:	ee30 0a00 	vadd.f32	s0, s0, s0
200190ee:	ed84 0a00 	vstr	s0, [r4]
200190f2:	e015      	b.n	20019120 <_Z13calculate_lenf+0x7c>
    } 
    else if (bpm_valf < 0.75f) 
200190f4:	eef6 7a08 	vmov.f32	s15, #104	; 0x3f400000  0.750
200190f8:	eeb4 0ae7 	vcmpe.f32	s0, s15
200190fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20019100:	d506      	bpl.n	20019110 <_Z13calculate_lenf+0x6c>
    {
      // 1/4 note
      s_len = ((60 * k_samplerate) / _fx_get_bpmf());
20019102:	f000 f949 	bl	20019398 <___fx_get_bpmf_veneer>
20019106:	ee88 0a00 	vdiv.f32	s0, s16, s0
2001910a:	ed84 0a00 	vstr	s0, [r4]
2001910e:	e007      	b.n	20019120 <_Z13calculate_lenf+0x7c>
    } 
    else 
    {
      // 1/8 note
      s_len = ((60 * k_samplerate) / _fx_get_bpmf()) / 2.f;
20019110:	f000 f942 	bl	20019398 <___fx_get_bpmf_veneer>
20019114:	ee88 0a00 	vdiv.f32	s0, s16, s0
20019118:	ee20 0a28 	vmul.f32	s0, s0, s17
2001911c:	ed84 0a00 	vstr	s0, [r4]
    }
}
20019120:	ecbd 8b02 	vpop	{d8}
20019124:	bd10      	pop	{r4, pc}
20019126:	bf00      	nop
20019128:	200193a0 	.word	0x200193a0
2001912c:	4a2fc800 	.word	0x4a2fc800

20019130 <_hook_init>:
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
20019130:	4a11      	ldr	r2, [pc, #68]	; (20019178 <_hook_init+0x48>)
20019132:	4b12      	ldr	r3, [pc, #72]	; (2001917c <_hook_init+0x4c>)
20019134:	6053      	str	r3, [r2, #4]
      mSize = nextpow2_u32(line_size); // must be power of 2
20019136:	f44f 2100 	mov.w	r1, #524288	; 0x80000
2001913a:	60d1      	str	r1, [r2, #12]
      mMask = (mSize-1);
2001913c:	3901      	subs	r1, #1
2001913e:	6111      	str	r1, [r2, #16]
20019140:	3310      	adds	r3, #16
      mWriteIdx = 0;
20019142:	2100      	movs	r1, #0
20019144:	6151      	str	r1, [r2, #20]
20019146:	f503 1000 	add.w	r0, r3, #2097152	; 0x200000
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
    REP4(*(ptr++) = 0);
2001914a:	2100      	movs	r1, #0
2001914c:	f843 1c10 	str.w	r1, [r3, #-16]
20019150:	f843 1c0c 	str.w	r1, [r3, #-12]
20019154:	f843 1c08 	str.w	r1, [r3, #-8]
20019158:	f843 1c04 	str.w	r1, [r3, #-4]
2001915c:	3310      	adds	r3, #16
static inline __attribute__((optimize("Ofast"),always_inline))
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
2001915e:	4298      	cmp	r0, r3
20019160:	d1f4      	bne.n	2001914c <_hook_init+0x1c>
*/
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  s_mix = .5f;
20019162:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
20019166:	ed82 0a06 	vstr	s0, [r2, #24]
  gain = .5f;
2001916a:	ed82 0a07 	vstr	s0, [r2, #28]
  bpm_valf = 0.5f;
2001916e:	ed82 0a08 	vstr	s0, [r2, #32]
  calculate_len(bpm_valf);
20019172:	f7ff bf97 	b.w	200190a4 <_Z13calculate_lenf>
20019176:	bf00      	nop
20019178:	200193a0 	.word	0x200193a0
2001917c:	c0420000 	.word	0xc0420000

20019180 <_hook_process>:
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
20019180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;
  const float wet = s_mix;
20019184:	4c69      	ldr	r4, [pc, #420]	; (2001932c <_hook_process+0x1ac>)
  bpm_valf = 0.5f;
  calculate_len(bpm_valf);
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
20019186:	ed2d 8b02 	vpush	{d8}
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;
2001918a:	00cf      	lsls	r7, r1, #3
  const float wet = s_mix;
  const float feedback = gain;

  calculate_len(bpm_valf);
2001918c:	ed94 0a08 	vldr	s0, [r4, #32]

void DELFX_PROCESS(float *xn, uint32_t frames)
{
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;
  const float wet = s_mix;
20019190:	edd4 8a06 	vldr	s17, [r4, #24]
  const float feedback = gain;
20019194:	ed94 8a07 	vldr	s16, [r4, #28]
  bpm_valf = 0.5f;
  calculate_len(bpm_valf);
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
20019198:	4605      	mov	r5, r0
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;
2001919a:	eb00 0807 	add.w	r8, r0, r7
  const float wet = s_mix;
  const float feedback = gain;

  calculate_len(bpm_valf);
2001919e:	f7ff ff81 	bl	200190a4 <_Z13calculate_lenf>
200191a2:	6966      	ldr	r6, [r4, #20]
     * @param pos Offset from write index
     * @return Sample at given position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float read(const uint32_t pos) {
      return mLine[(mWriteIdx + pos) & mMask];
200191a4:	6861      	ldr	r1, [r4, #4]
200191a6:	f8d4 e010 	ldr.w	lr, [r4, #16]
    wetXNR = wet * delSampleR;

    s_delay.write(feedback * (*x + delSampleL));
    s_delay.write(feedback * (*(x+1) + delSampleR));

    *x = (*x) + fastertanhf(waveshape(wetXNL));
200191aa:	ed9f 3a61 	vldr	s6, [pc, #388]	; 20019330 <_hook_process+0x1b0>
200191ae:	eddf 3a61 	vldr	s7, [pc, #388]	; 20019334 <_hook_process+0x1b4>
200191b2:	ed9f 4a61 	vldr	s8, [pc, #388]	; 20019338 <_hook_process+0x1b8>
200191b6:	eddf 4a61 	vldr	s9, [pc, #388]	; 2001933c <_hook_process+0x1bc>
200191ba:	ed9f 5a61 	vldr	s10, [pc, #388]	; 20019340 <_hook_process+0x1c0>
200191be:	eddf 5a61 	vldr	s11, [pc, #388]	; 20019344 <_hook_process+0x1c4>
200191c2:	ed9f 6a61 	vldr	s12, [pc, #388]	; 20019348 <_hook_process+0x1c8>
200191c6:	eddf 6a61 	vldr	s13, [pc, #388]	; 2001934c <_hook_process+0x1cc>
200191ca:	4628      	mov	r0, r5
200191cc:	4632      	mov	r2, r6
float wetXNL, wetXNR;
float bpm_valf;

float __fast_inline waveshape(float in) 
{
    return 1.5f * in - 0.5f * in *in * in;
200191ce:	eef6 2a00 	vmov.f32	s5, #96	; 0x3f000000  0.5
  const float wet = s_mix;
  const float feedback = gain;

  calculate_len(bpm_valf);

  for (; x != x_e ; x+=2) 
200191d2:	4580      	cmp	r8, r0
200191d4:	f100 0508 	add.w	r5, r0, #8
200191d8:	f1a2 0c02 	sub.w	ip, r2, #2
200191dc:	f000 809f 	beq.w	2001931e <_hook_process+0x19e>
  {
    const float delSampleL = s_delay.readFrac(s_len);
200191e0:	ed94 7a00 	vldr	s14, [r4]
     * @param pos Offset from write index as floating point.
     * @return Interpolated sample at given fractional position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float readFrac(const float pos) {
      const uint32_t base = (uint32_t)pos;
200191e4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    wetXNR = wet * delSampleR;

    s_delay.write(feedback * (*x + delSampleL));
    s_delay.write(feedback * (*(x+1) + delSampleR));

    *x = (*x) + fastertanhf(waveshape(wetXNL));
200191e8:	eef0 1a44 	vmov.f32	s3, s8
200191ec:	ee17 3a90 	vmov	r3, s15
     * @param pos Offset from write index
     * @return Sample at given position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float read(const uint32_t pos) {
      return mLine[(mWriteIdx + pos) & mMask];
200191f0:	1898      	adds	r0, r3, r2
200191f2:	ea00 000e 	and.w	r0, r0, lr
200191f6:	eb01 0080 	add.w	r0, r1, r0, lsl #2
200191fa:	edd0 7a00 	vldr	s15, [r0]

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200191fe:	ee02 3a10 	vmov	s4, r3
20019202:	1c50      	adds	r0, r2, #1
20019204:	4403      	add	r3, r0
20019206:	eeb8 2a42 	vcvt.f32.u32	s4, s4
2001920a:	ea03 030e 	and.w	r3, r3, lr
2001920e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
20019212:	ee37 7a42 	vsub.f32	s14, s14, s4
20019216:	ed93 2a00 	vldr	s4, [r3]
2001921a:	ee32 2a67 	vsub.f32	s4, s4, s15
     *
     * @param s Sample to write
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void write(const float s) {
      mLine[(mWriteIdx--) & mMask] = s;
2001921e:	ea0e 0302 	and.w	r3, lr, r2
20019222:	eee7 7a02 	vfma.f32	s15, s14, s4
20019226:	eb01 0383 	add.w	r3, r1, r3, lsl #2
2001922a:	3a01      	subs	r2, #1
2001922c:	ea02 020e 	and.w	r2, r2, lr
  for (; x != x_e ; x+=2) 
  {
    const float delSampleL = s_delay.readFrac(s_len);
    const float delSampleR = s_delay.readFrac(s_len);

    wetXNL = wet * delSampleL;
20019230:	ee28 7aa7 	vmul.f32	s14, s17, s15
20019234:	eb01 0282 	add.w	r2, r1, r2, lsl #2
20019238:	ed84 7a09 	vstr	s14, [r4, #36]	; 0x24
    wetXNR = wet * delSampleR;
2001923c:	ed84 7a0a 	vstr	s14, [r4, #40]	; 0x28
20019240:	ed15 7a02 	vldr	s14, [r5, #-8]
20019244:	ee37 7a87 	vadd.f32	s14, s15, s14
float wetXNL, wetXNR;
float bpm_valf;

float __fast_inline waveshape(float in) 
{
    return 1.5f * in - 0.5f * in *in * in;
20019248:	eeb7 2a08 	vmov.f32	s4, #120	; 0x3fc00000  1.5
2001924c:	ee27 7a08 	vmul.f32	s14, s14, s16
    wetXNR = wet * delSampleR;

    s_delay.write(feedback * (*x + delSampleL));
    s_delay.write(feedback * (*(x+1) + delSampleR));

    *x = (*x) + fastertanhf(waveshape(wetXNL));
20019250:	eeb0 1a46 	vmov.f32	s2, s12
20019254:	ed83 7a00 	vstr	s14, [r3]
20019258:	ed15 7a01 	vldr	s14, [r5, #-4]
2001925c:	ee77 7a87 	vadd.f32	s15, s15, s14
  const float wet = s_mix;
  const float feedback = gain;

  calculate_len(bpm_valf);

  for (; x != x_e ; x+=2) 
20019260:	4628      	mov	r0, r5
20019262:	ee67 7a88 	vmul.f32	s15, s15, s16
20019266:	edc2 7a00 	vstr	s15, [r2]
    wetXNR = wet * delSampleR;

    s_delay.write(feedback * (*x + delSampleL));
    s_delay.write(feedback * (*(x+1) + delSampleR));

    *x = (*x) + fastertanhf(waveshape(wetXNL));
2001926a:	ed94 7a09 	vldr	s14, [r4, #36]	; 0x24
float wetXNL, wetXNR;
float bpm_valf;

float __fast_inline waveshape(float in) 
{
    return 1.5f * in - 0.5f * in *in * in;
2001926e:	ee67 7a07 	vmul.f32	s15, s14, s14
  const float wet = s_mix;
  const float feedback = gain;

  calculate_len(bpm_valf);

  for (; x != x_e ; x+=2) 
20019272:	4662      	mov	r2, ip
float wetXNL, wetXNR;
float bpm_valf;

float __fast_inline waveshape(float in) 
{
    return 1.5f * in - 0.5f * in *in * in;
20019274:	ee67 7a87 	vmul.f32	s15, s15, s14
20019278:	ee62 7ae7 	vnmul.f32	s15, s5, s15
2001927c:	eee7 7a02 	vfma.f32	s15, s14, s4
    wetXNR = wet * delSampleR;

    s_delay.write(feedback * (*x + delSampleL));
    s_delay.write(feedback * (*(x+1) + delSampleR));

    *x = (*x) + fastertanhf(waveshape(wetXNL));
20019280:	eeb0 7a63 	vmov.f32	s14, s7
20019284:	eea7 7a83 	vfma.f32	s14, s15, s6
20019288:	eee7 1a27 	vfma.f32	s3, s14, s15
2001928c:	eeb0 7a61 	vmov.f32	s14, s3
20019290:	eef0 1a64 	vmov.f32	s3, s9
20019294:	eee7 1a27 	vfma.f32	s3, s14, s15
20019298:	eeb0 7a65 	vmov.f32	s14, s11
2001929c:	eea7 7a85 	vfma.f32	s14, s15, s10
200192a0:	eea7 1a27 	vfma.f32	s2, s14, s15
200192a4:	eeb0 7a41 	vmov.f32	s14, s2
200192a8:	eeb0 1a66 	vmov.f32	s2, s13
200192ac:	eea7 1a27 	vfma.f32	s2, s14, s15
200192b0:	ed55 7a02 	vldr	s15, [r5, #-8]
200192b4:	ee81 7a81 	vdiv.f32	s14, s3, s2
    *(x+1) = *(x+1) + fastertanhf(waveshape(wetXNR));
200192b8:	eef0 1a46 	vmov.f32	s3, s12
    wetXNR = wet * delSampleR;

    s_delay.write(feedback * (*x + delSampleL));
    s_delay.write(feedback * (*(x+1) + delSampleR));

    *x = (*x) + fastertanhf(waveshape(wetXNL));
200192bc:	ee77 7a87 	vadd.f32	s15, s15, s14
200192c0:	ed45 7a02 	vstr	s15, [r5, #-8]
    *(x+1) = *(x+1) + fastertanhf(waveshape(wetXNR));
200192c4:	ed94 7a0a 	vldr	s14, [r4, #40]	; 0x28
float wetXNL, wetXNR;
float bpm_valf;

float __fast_inline waveshape(float in) 
{
    return 1.5f * in - 0.5f * in *in * in;
200192c8:	ee67 7a07 	vmul.f32	s15, s14, s14
200192cc:	ee67 7a87 	vmul.f32	s15, s15, s14
200192d0:	ee62 7ae7 	vnmul.f32	s15, s5, s15
200192d4:	eee7 7a02 	vfma.f32	s15, s14, s4

    s_delay.write(feedback * (*x + delSampleL));
    s_delay.write(feedback * (*(x+1) + delSampleR));

    *x = (*x) + fastertanhf(waveshape(wetXNL));
    *(x+1) = *(x+1) + fastertanhf(waveshape(wetXNR));
200192d8:	eeb0 7a63 	vmov.f32	s14, s7
200192dc:	eea7 7a83 	vfma.f32	s14, s15, s6
200192e0:	eeb0 2a44 	vmov.f32	s4, s8
200192e4:	eea7 2a27 	vfma.f32	s4, s14, s15
200192e8:	eeb0 7a42 	vmov.f32	s14, s4
200192ec:	eeb0 2a64 	vmov.f32	s4, s9
200192f0:	eea7 2a27 	vfma.f32	s4, s14, s15
200192f4:	eeb0 7a65 	vmov.f32	s14, s11
200192f8:	eea7 7a85 	vfma.f32	s14, s15, s10
200192fc:	eee7 1a27 	vfma.f32	s3, s14, s15
20019300:	eeb0 7a61 	vmov.f32	s14, s3
20019304:	eef0 1a66 	vmov.f32	s3, s13
20019308:	eee7 1a27 	vfma.f32	s3, s14, s15
2001930c:	ed55 7a01 	vldr	s15, [r5, #-4]
20019310:	ee82 7a21 	vdiv.f32	s14, s4, s3
20019314:	ee77 7a87 	vadd.f32	s15, s15, s14
20019318:	ed45 7a01 	vstr	s15, [r5, #-4]
  const float wet = s_mix;
  const float feedback = gain;

  calculate_len(bpm_valf);

  for (; x != x_e ; x+=2) 
2001931c:	e759      	b.n	200191d2 <_hook_process+0x52>
    *x = (*x) + fastertanhf(waveshape(wetXNL));
    *(x+1) = *(x+1) + fastertanhf(waveshape(wetXNR));


  }
}
2001931e:	ecbd 8b02 	vpop	{d8}
20019322:	eba6 0697 	sub.w	r6, r6, r7, lsr #2
20019326:	6166      	str	r6, [r4, #20]
20019328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001932c:	200193a0 	.word	0x200193a0
20019330:	3d098436 	.word	0x3d098436
20019334:	3d6f1472 	.word	0x3d6f1472
20019338:	3e7cbd0c 	.word	0x3e7cbd0c
2001933c:	b6e247c8 	.word	0xb6e247c8
20019340:	3ceb7eff 	.word	0x3ceb7eff
20019344:	3dde744d 	.word	0x3dde744d
20019348:	3d7996af 	.word	0x3d7996af
2001934c:	3e7c6675 	.word	0x3e7c6675

20019350 <_hook_param>:

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
20019350:	ee07 1a90 	vmov	s15, r1
  switch (index) {
20019354:	2801      	cmp	r0, #1
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
20019356:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
  switch (index) {
2001935a:	d007      	beq.n	2001936c <_hook_param+0x1c>
2001935c:	d302      	bcc.n	20019364 <_hook_param+0x14>
2001935e:	2803      	cmp	r0, #3
20019360:	d008      	beq.n	20019374 <_hook_param+0x24>
20019362:	4770      	bx	lr
  case k_user_delfx_param_time:
    // Gain == Feedback //
    gain = valf;
20019364:	4b05      	ldr	r3, [pc, #20]	; (2001937c <_hook_param+0x2c>)
20019366:	edc3 7a07 	vstr	s15, [r3, #28]
    break;
2001936a:	4770      	bx	lr
  case k_user_delfx_param_depth:
    bpm_valf = valf;
2001936c:	4b03      	ldr	r3, [pc, #12]	; (2001937c <_hook_param+0x2c>)
2001936e:	edc3 7a08 	vstr	s15, [r3, #32]
    break;
20019372:	4770      	bx	lr
  case k_user_delfx_param_shift_depth:
    s_mix = valf;
20019374:	4b01      	ldr	r3, [pc, #4]	; (2001937c <_hook_param+0x2c>)
20019376:	edc3 7a06 	vstr	s15, [r3, #24]
2001937a:	4770      	bx	lr
2001937c:	200193a0 	.word	0x200193a0

20019380 <_GLOBAL__sub_I_s_len>:
    DelayLine(void) :
      mLine(0),
      mFracZ(0),
      mSize(0),
      mMask(0),
      mWriteIdx(0)
20019380:	4b04      	ldr	r3, [pc, #16]	; (20019394 <_GLOBAL__sub_I_s_len+0x14>)
20019382:	2200      	movs	r2, #0
20019384:	2100      	movs	r1, #0
20019386:	605a      	str	r2, [r3, #4]
20019388:	6099      	str	r1, [r3, #8]
2001938a:	60da      	str	r2, [r3, #12]
2001938c:	611a      	str	r2, [r3, #16]
2001938e:	615a      	str	r2, [r3, #20]
20019390:	4770      	bx	lr
20019392:	bf00      	nop
20019394:	200193a0 	.word	0x200193a0

20019398 <___fx_get_bpmf_veneer>:
20019398:	f85f f000 	ldr.w	pc, [pc]	; 2001939c <___fx_get_bpmf_veneer+0x4>
2001939c:	0807ca8d 	.word	0x0807ca8d
