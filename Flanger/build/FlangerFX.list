
build/FlangerFX.elf:     file format elf32-littlearm


Disassembly of section .text:

20019048 <_text_start>:
20019048:	4770      	bx	lr

2001904a <_hook_resume>:
2001904a:	4770      	bx	lr
2001904c:	4770      	bx	lr

2001904e <_hook_suspend>:
2001904e:	4770      	bx	lr
20019050:	4770      	bx	lr

20019052 <_entry>:
20019052:	4b10      	ldr	r3, [pc, #64]	; (20019094 <_entry+0x42>)
20019054:	4a10      	ldr	r2, [pc, #64]	; (20019098 <_entry+0x46>)
20019056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2001905a:	4688      	mov	r8, r1
2001905c:	4607      	mov	r7, r0
2001905e:	2100      	movs	r1, #0
20019060:	4293      	cmp	r3, r2
20019062:	d002      	beq.n	2001906a <_entry+0x18>
20019064:	f803 1f01 	strb.w	r1, [r3, #1]!
20019068:	e7fa      	b.n	20019060 <_entry+0xe>
2001906a:	4b0c      	ldr	r3, [pc, #48]	; (2001909c <_entry+0x4a>)
2001906c:	4c0c      	ldr	r4, [pc, #48]	; (200190a0 <_entry+0x4e>)
2001906e:	1ae4      	subs	r4, r4, r3
20019070:	10a4      	asrs	r4, r4, #2
20019072:	2500      	movs	r5, #0
20019074:	461e      	mov	r6, r3
20019076:	42a5      	cmp	r5, r4
20019078:	d005      	beq.n	20019086 <_entry+0x34>
2001907a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2001907e:	b103      	cbz	r3, 20019082 <_entry+0x30>
20019080:	4798      	blx	r3
20019082:	3501      	adds	r5, #1
20019084:	e7f7      	b.n	20019076 <_entry+0x24>
20019086:	4641      	mov	r1, r8
20019088:	4638      	mov	r0, r7
2001908a:	f000 f80b 	bl	200190a4 <_hook_init>
2001908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20019092:	bf00      	nop
20019094:	20019267 	.word	0x20019267
20019098:	2001929b 	.word	0x2001929b
2001909c:	20019040 	.word	0x20019040
200190a0:	20019044 	.word	0x20019044

200190a4 <_hook_init>:

/*
  Give the s_delay_ram to s_delay object, instantiate variables
*/
void DELFX_INIT(uint32_t platform, uint32_t api)
{
200190a4:	b510      	push	{r4, lr}
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190a6:	4c1c      	ldr	r4, [pc, #112]	; (20019118 <_hook_init+0x74>)
200190a8:	4a1c      	ldr	r2, [pc, #112]	; (2001911c <_hook_init+0x78>)
200190aa:	6022      	str	r2, [r4, #0]
      mSize = nextpow2_u32(line_size); // must be power of 2
200190ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200190b0:	60a3      	str	r3, [r4, #8]
      mMask = (mSize-1);
200190b2:	3b01      	subs	r3, #1
200190b4:	60e3      	str	r3, [r4, #12]
      mWriteIdx = 0;
200190b6:	2300      	movs	r3, #0
200190b8:	6123      	str	r3, [r4, #16]
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
    REP4(*(ptr++) = 0);
200190ba:	2100      	movs	r1, #0
200190bc:	f102 0310 	add.w	r3, r2, #16
200190c0:	f102 1210 	add.w	r2, r2, #1048592	; 0x100010
200190c4:	f843 1c10 	str.w	r1, [r3, #-16]
200190c8:	f843 1c0c 	str.w	r1, [r3, #-12]
200190cc:	f843 1c08 	str.w	r1, [r3, #-8]
200190d0:	f843 1c04 	str.w	r1, [r3, #-4]
200190d4:	3310      	adds	r3, #16
static inline __attribute__((optimize("Ofast"),always_inline))
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
200190d6:	429a      	cmp	r2, r3
200190d8:	d1f4      	bne.n	200190c4 <_hook_init+0x20>
     * Reset phase
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void reset(void) 
    {
      phi0 = 0x80000000;
200190da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
200190de:	6163      	str	r3, [r4, #20]
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  s_lfo.reset();
  bpm = _fx_get_bpm();
200190e0:	f000 f8b8 	bl	20019254 <___fx_get_bpm_veneer>
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190e4:	230a      	movs	r3, #10
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  s_lfo.reset();
  bpm = _fx_get_bpm();
200190e6:	61e0      	str	r0, [r4, #28]
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190e8:	fb90 f0f3 	sdiv	r0, r0, r3
200190ec:	233c      	movs	r3, #60	; 0x3c
200190ee:	fb93 f0f0 	sdiv	r0, r3, r0
200190f2:	4b0b      	ldr	r3, [pc, #44]	; (20019120 <_hook_init+0x7c>)
     * param fsrecip Reciprocal of sampling frequency (1/Fs)
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setF0(const float f0, const float fsrecip) 
    {
      w0 = f32_to_q31(2.f * f0 * fsrecip);
200190f4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 20019124 <_hook_init+0x80>
200190f8:	4358      	muls	r0, r3
  s_mix = .5f;
200190fa:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
200190fe:	6263      	str	r3, [r4, #36]	; 0x24
  s_lfo.setF0(lfo_speed, k_samplerate_recipf);
20019100:	4b09      	ldr	r3, [pc, #36]	; (20019128 <_hook_init+0x84>)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  s_lfo.reset();
  bpm = _fx_get_bpm();
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
20019102:	6220      	str	r0, [r4, #32]
20019104:	edd3 7a00 	vldr	s15, [r3]
20019108:	ee67 7a87 	vmul.f32	s15, s15, s14
2001910c:	eefe 7ac0 	vcvt.s32.f32	s15, s15, #32
20019110:	edc4 7a06 	vstr	s15, [r4, #24]
20019114:	bd10      	pop	{r4, pc}
20019116:	bf00      	nop
20019118:	20019268 	.word	0x20019268
2001911c:	c0420000 	.word	0xc0420000
20019120:	00668a00 	.word	0x00668a00
20019124:	37aec33e 	.word	0x37aec33e
20019128:	20019260 	.word	0x20019260

2001912c <_hook_process>:
void DELFX_PROCESS(float *xn, uint32_t frames)
{
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;

  const float wet = s_mix;
2001912c:	4b2a      	ldr	r3, [pc, #168]	; (200191d8 <_hook_process+0xac>)
     * Get value of bipolar sine wave for current phase 
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float sine_bi(void) 
    {
      const float phif = q31_to_f32(phi0);
2001912e:	eddf 4a2b 	vldr	s9, [pc, #172]	; 200191dc <_hook_process+0xb0>
20019132:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
     * @param pos Offset from write index
     * @return Sample at given position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float read(const uint32_t pos) {
      return mLine[(mWriteIdx + pos) & mMask];
20019136:	f8d3 c000 	ldr.w	ip, [r3]
  const float dry = 1.f - s_mix;
  f32pair_t valf;

  for (; x != x_e ; x++) 
  {
    const float delSampleL = gain * (s_delay.read(720) * s_lfo.sine_bi());
2001913a:	ed93 6a0a 	vldr	s12, [r3, #40]	; 0x28
{
    return 1.5f * in - 0.5f * in *in * in;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
2001913e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
20019142:	f103 0410 	add.w	r4, r3, #16
20019146:	e894 4090 	ldmia.w	r4, {r4, r7, lr}
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;
2001914a:	00c9      	lsls	r1, r1, #3
2001914c:	f8d3 800c 	ldr.w	r8, [r3, #12]
20019150:	eb00 0901 	add.w	r9, r0, r1
20019154:	463e      	mov	r6, r7
     * Step phase one cycle forward
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void cycle(void)
    {
      phi0 += w0;
20019156:	4625      	mov	r5, r4
  f32pair_t valf;

  for (; x != x_e ; x++) 
  {
    const float delSampleL = gain * (s_delay.read(720) * s_lfo.sine_bi());
    wetXNL = wet * delSampleL;
20019158:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
2001915c:	eef1 5a00 	vmov.f32	s11, #16	; 0x40800000  4.0

  const float wet = s_mix;
  const float dry = 1.f - s_mix;
  f32pair_t valf;

  for (; x != x_e ; x++) 
20019160:	4548      	cmp	r0, r9
20019162:	ee07 6a90 	vmov	s15, r6
20019166:	4476      	add	r6, lr
20019168:	d02d      	beq.n	200191c6 <_hook_process+0x9a>
     * Get value of bipolar sine wave for current phase 
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float sine_bi(void) 
    {
      const float phif = q31_to_f32(phi0);
2001916a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2001916e:	f505 7234 	add.w	r2, r5, #720	; 0x2d0
20019172:	ee27 7aa4 	vmul.f32	s14, s15, s9
20019176:	ea02 0208 	and.w	r2, r2, r8
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float si_fabsf(float x)
{
  f32_t xs = {x};
  xs.i &= 0x7fffffff;
2001917a:	ee17 aa10 	vmov	sl, s14
2001917e:	f02a 4a00 	bic.w	sl, sl, #2147483648	; 0x80000000
20019182:	ee07 aa90 	vmov	s15, sl
  {
    const float delSampleL = gain * (s_delay.read(720) * s_lfo.sine_bi());
    wetXNL = wet * delSampleL;
20019186:	ee77 7ac5 	vsub.f32	s15, s15, s10
2001918a:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
2001918e:	ee67 7a87 	vmul.f32	s15, s15, s14
20019192:	ed92 7a00 	vldr	s14, [r2]
20019196:	ee67 7aa5 	vmul.f32	s15, s15, s11
     *
     * @param s Sample to write
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void write(const float s) {
      mLine[(mWriteIdx--) & mMask] = s;
2001919a:	ea08 0205 	and.w	r2, r8, r5
2001919e:	ee67 7a87 	vmul.f32	s15, s15, s14
200191a2:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
200191a6:	ee67 7a86 	vmul.f32	s15, s15, s12
200191aa:	3d01      	subs	r5, #1
200191ac:	ee67 7aa6 	vmul.f32	s15, s15, s13
200191b0:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
    *x = (*x) + wetXNL;
200191b4:	ed90 7a00 	vldr	s14, [r0]
200191b8:	ee77 7a87 	vadd.f32	s15, s15, s14
200191bc:	ece0 7a01 	vstmia	r0!, {s15}
200191c0:	edc2 7a00 	vstr	s15, [r2]

  const float wet = s_mix;
  const float dry = 1.f - s_mix;
  f32pair_t valf;

  for (; x != x_e ; x++) 
200191c4:	e7cc      	b.n	20019160 <_hook_process+0x34>
200191c6:	0889      	lsrs	r1, r1, #2
200191c8:	1a64      	subs	r4, r4, r1
200191ca:	fb0e 7101 	mla	r1, lr, r1, r7
200191ce:	611c      	str	r4, [r3, #16]
200191d0:	6159      	str	r1, [r3, #20]
200191d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200191d6:	bf00      	nop
200191d8:	20019268 	.word	0x20019268
200191dc:	30000000 	.word	0x30000000

200191e0 <_hook_param>:
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
200191e0:	ee07 1a90 	vmov	s15, r1
  switch (index) 
200191e4:	2801      	cmp	r0, #1
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
200191e6:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
  switch (index) 
200191ea:	d007      	beq.n	200191fc <_hook_param+0x1c>
200191ec:	d302      	bcc.n	200191f4 <_hook_param+0x14>
200191ee:	2803      	cmp	r0, #3
200191f0:	d015      	beq.n	2001921e <_hook_param+0x3e>
200191f2:	4770      	bx	lr
  {
  case 0:
    // Gain == Feedback //
    gain = valf;
200191f4:	4b0c      	ldr	r3, [pc, #48]	; (20019228 <_hook_param+0x48>)
200191f6:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    break;
200191fa:	4770      	bx	lr
  case 1:
    lfo_speed = valf * 10.f;
200191fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
20019200:	ee67 7a87 	vmul.f32	s15, s15, s14
20019204:	4b09      	ldr	r3, [pc, #36]	; (2001922c <_hook_param+0x4c>)
     * param fsrecip Reciprocal of sampling frequency (1/Fs)
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setF0(const float f0, const float fsrecip) 
    {
      w0 = f32_to_q31(2.f * f0 * fsrecip);
20019206:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 20019230 <_hook_param+0x50>
2001920a:	edc3 7a00 	vstr	s15, [r3]
2001920e:	ee67 7a87 	vmul.f32	s15, s15, s14
20019212:	4b05      	ldr	r3, [pc, #20]	; (20019228 <_hook_param+0x48>)
20019214:	eefe 7ac0 	vcvt.s32.f32	s15, s15, #32
20019218:	edc3 7a06 	vstr	s15, [r3, #24]
2001921c:	4770      	bx	lr
    s_lfo.setF0(lfo_speed, k_samplerate_recipf);
    break;
  case 3:
    // Mix Val
    s_mix = valf;
2001921e:	4b02      	ldr	r3, [pc, #8]	; (20019228 <_hook_param+0x48>)
20019220:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
20019224:	4770      	bx	lr
20019226:	bf00      	nop
20019228:	20019268 	.word	0x20019268
2001922c:	20019260 	.word	0x20019260
20019230:	37aec33e 	.word	0x37aec33e

20019234 <_GLOBAL__sub_I_lfo_speed>:
    DelayLine(void) :
      mLine(0),
      mFracZ(0),
      mSize(0),
      mMask(0),
      mWriteIdx(0)
20019234:	4b06      	ldr	r3, [pc, #24]	; (20019250 <_GLOBAL__sub_I_lfo_speed+0x1c>)
20019236:	2100      	movs	r1, #0
20019238:	2200      	movs	r2, #0
2001923a:	6059      	str	r1, [r3, #4]

    /**
     * Default constructor
     */
    SimpleLFO(void) :
      phi0(0x80000000), w0(0)
2001923c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
20019240:	601a      	str	r2, [r3, #0]
20019242:	609a      	str	r2, [r3, #8]
20019244:	60da      	str	r2, [r3, #12]
20019246:	611a      	str	r2, [r3, #16]
20019248:	6159      	str	r1, [r3, #20]
2001924a:	619a      	str	r2, [r3, #24]
2001924c:	4770      	bx	lr
2001924e:	bf00      	nop
20019250:	20019268 	.word	0x20019268

20019254 <___fx_get_bpm_veneer>:
20019254:	f85f f000 	ldr.w	pc, [pc]	; 20019258 <___fx_get_bpm_veneer+0x4>
20019258:	0807ca89 	.word	0x0807ca89
