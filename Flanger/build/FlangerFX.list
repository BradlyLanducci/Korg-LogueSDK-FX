
build/FlangerFX.elf:     file format elf32-littlearm


Disassembly of section .text:

20019044 <_text_start>:
20019044:	4770      	bx	lr

20019046 <_hook_resume>:
20019046:	4770      	bx	lr
20019048:	4770      	bx	lr

2001904a <_hook_suspend>:
2001904a:	4770      	bx	lr
2001904c:	4770      	bx	lr

2001904e <_entry>:
2001904e:	4b10      	ldr	r3, [pc, #64]	; (20019090 <_entry+0x42>)
20019050:	4a10      	ldr	r2, [pc, #64]	; (20019094 <_entry+0x46>)
20019052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20019056:	4688      	mov	r8, r1
20019058:	4607      	mov	r7, r0
2001905a:	2100      	movs	r1, #0
2001905c:	4293      	cmp	r3, r2
2001905e:	d002      	beq.n	20019066 <_entry+0x18>
20019060:	f803 1f01 	strb.w	r1, [r3, #1]!
20019064:	e7fa      	b.n	2001905c <_entry+0xe>
20019066:	4b0c      	ldr	r3, [pc, #48]	; (20019098 <_entry+0x4a>)
20019068:	4c0c      	ldr	r4, [pc, #48]	; (2001909c <_entry+0x4e>)
2001906a:	1ae4      	subs	r4, r4, r3
2001906c:	10a4      	asrs	r4, r4, #2
2001906e:	2500      	movs	r5, #0
20019070:	461e      	mov	r6, r3
20019072:	42a5      	cmp	r5, r4
20019074:	d005      	beq.n	20019082 <_entry+0x34>
20019076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2001907a:	b103      	cbz	r3, 2001907e <_entry+0x30>
2001907c:	4798      	blx	r3
2001907e:	3501      	adds	r5, #1
20019080:	e7f7      	b.n	20019072 <_entry+0x24>
20019082:	4641      	mov	r1, r8
20019084:	4638      	mov	r0, r7
20019086:	f000 f80b 	bl	200190a0 <_hook_init>
2001908a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001908e:	bf00      	nop
20019090:	2001927f 	.word	0x2001927f
20019094:	200192af 	.word	0x200192af
20019098:	20019040 	.word	0x20019040
2001909c:	20019044 	.word	0x20019044

200190a0 <_hook_init>:
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190a0:	4b15      	ldr	r3, [pc, #84]	; (200190f8 <_hook_init+0x58>)
200190a2:	4916      	ldr	r1, [pc, #88]	; (200190fc <_hook_init+0x5c>)
200190a4:	6019      	str	r1, [r3, #0]
      mSize = nextpow2_u32(line_size); // must be power of 2
200190a6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
200190aa:	609a      	str	r2, [r3, #8]
      mMask = (mSize-1);
200190ac:	3a01      	subs	r2, #1
200190ae:	60da      	str	r2, [r3, #12]
      mWriteIdx = 0;
200190b0:	2200      	movs	r2, #0
200190b2:	611a      	str	r2, [r3, #16]
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
    REP4(*(ptr++) = 0);
200190b4:	2000      	movs	r0, #0
200190b6:	f101 0210 	add.w	r2, r1, #16
200190ba:	f101 1110 	add.w	r1, r1, #1048592	; 0x100010
200190be:	f842 0c10 	str.w	r0, [r2, #-16]
200190c2:	f842 0c0c 	str.w	r0, [r2, #-12]
200190c6:	f842 0c08 	str.w	r0, [r2, #-8]
200190ca:	f842 0c04 	str.w	r0, [r2, #-4]
200190ce:	3210      	adds	r2, #16
static inline __attribute__((optimize("Ofast"),always_inline))
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
200190d0:	4291      	cmp	r1, r2
200190d2:	d1f4      	bne.n	200190be <_hook_init+0x1e>
     * Reset phase
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void reset(void) 
    {
      phi0 = 0x80000000;
200190d4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
200190d8:	615a      	str	r2, [r3, #20]
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  s_lfo.reset();
  s_mix = .5f;
200190da:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
200190de:	61da      	str	r2, [r3, #28]
  s_lfo.setF0(lfo_speed, k_samplerate_recipf);
200190e0:	4a07      	ldr	r2, [pc, #28]	; (20019100 <_hook_init+0x60>)
     * param fsrecip Reciprocal of sampling frequency (1/Fs)
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setF0(const float f0, const float fsrecip) 
    {
      w0 = f32_to_q31(2.f * f0 * fsrecip);
200190e2:	ed9f 7a08 	vldr	s14, [pc, #32]	; 20019104 <_hook_init+0x64>
200190e6:	edd2 7a00 	vldr	s15, [r2]
200190ea:	ee67 7a87 	vmul.f32	s15, s15, s14
200190ee:	eefe 7ac0 	vcvt.s32.f32	s15, s15, #32
200190f2:	edc3 7a06 	vstr	s15, [r3, #24]
200190f6:	4770      	bx	lr
200190f8:	20019280 	.word	0x20019280
200190fc:	c0420000 	.word	0xc0420000
20019100:	20019278 	.word	0x20019278
20019104:	37aec33e 	.word	0x37aec33e

20019108 <_hook_process>:
void DELFX_PROCESS(float *xn, uint32_t frames)
{
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;

  const float wet = s_mix;
20019108:	4b3a      	ldr	r3, [pc, #232]	; (200191f4 <_hook_process+0xec>)
     * Get value of bipolar sine wave for current phase 
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float sine_bi(void) 
    {
      const float phif = q31_to_f32(phi0);
2001910a:	eddf 3a3b 	vldr	s7, [pc, #236]	; 200191f8 <_hook_process+0xf0>
2001910e:	ed93 6a07 	vldr	s12, [r3, #28]
     * @param pos Offset from write index
     * @return Sample at given position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float read(const uint32_t pos) {
      return mLine[(mWriteIdx + pos) & mMask];
20019112:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 200191fc <_hook_process+0xf4>
20019116:	eddf 5a3a 	vldr	s11, [pc, #232]	; 20019200 <_hook_process+0xf8>
  s_mix = .5f;
  s_lfo.setF0(lfo_speed, k_samplerate_recipf);
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
2001911a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
2001911e:	f8d3 8014 	ldr.w	r8, [r3, #20]
20019122:	691d      	ldr	r5, [r3, #16]
20019124:	681f      	ldr	r7, [r3, #0]
20019126:	f8d3 e00c 	ldr.w	lr, [r3, #12]
     * Step phase one cycle forward
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void cycle(void)
    {
      phi0 += w0;
2001912a:	699e      	ldr	r6, [r3, #24]
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;
2001912c:	00c9      	lsls	r1, r1, #3
2001912e:	eb00 0a01 	add.w	sl, r0, r1
20019132:	46c4      	mov	ip, r8
20019134:	462a      	mov	r2, r5
20019136:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
2001913a:	eef1 4a00 	vmov.f32	s9, #16	; 0x40800000  4.0

  const float wet = s_mix;
  const float dry = 1.f - s_mix;

  for (; x != x_e ; x+=2) 
2001913e:	4582      	cmp	sl, r0
20019140:	ee07 ca90 	vmov	s15, ip
20019144:	f100 0408 	add.w	r4, r0, #8
20019148:	f1a2 0902 	sub.w	r9, r2, #2
2001914c:	44b4      	add	ip, r6
2001914e:	d047      	beq.n	200191e0 <_hook_process+0xd8>
     * Get value of bipolar sine wave for current phase 
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float sine_bi(void) 
    {
      const float phif = q31_to_f32(phi0);
20019150:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20019154:	ee27 7aa3 	vmul.f32	s14, s15, s7
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float si_fabsf(float x)
{
  f32_t xs = {x};
  xs.i &= 0x7fffffff;
20019158:	ee17 0a10 	vmov	r0, s14
2001915c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
20019160:	ee07 0a90 	vmov	s15, r0
20019164:	ee77 7ac4 	vsub.f32	s15, s15, s8
20019168:	ee67 7a87 	vmul.f32	s15, s15, s14
2001916c:	eeb0 7a65 	vmov.f32	s14, s11
20019170:	ee67 7aa4 	vmul.f32	s15, s15, s9
20019174:	eea7 7a85 	vfma.f32	s14, s15, s10
20019178:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    const float lfo_cycle = s_lfo.sine_bi();

    const float delSampleL = gain * (s_delay.read(288 + (240 * lfo_cycle)));
    const float delSampleR = gain * (s_delay.read(288 + (240 * lfo_cycle)));
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
2001917c:	ed93 7a08 	vldr	s14, [r3, #32]
20019180:	ee17 0a90 	vmov	r0, s15
20019184:	4410      	add	r0, r2
20019186:	ea00 000e 	and.w	r0, r0, lr
2001918a:	eb07 0080 	add.w	r0, r7, r0, lsl #2
2001918e:	edd0 7a00 	vldr	s15, [r0]
20019192:	ee67 7a87 	vmul.f32	s15, s15, s14
     *
     * @param s Sample to write
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void write(const float s) {
      mLine[(mWriteIdx--) & mMask] = s;
20019196:	ea0e 0002 	and.w	r0, lr, r2
2001919a:	ee67 7a86 	vmul.f32	s15, s15, s12
2001919e:	3a01      	subs	r2, #1
    wetXNR = wet * delSampleR;
200191a0:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    const float lfo_cycle = s_lfo.sine_bi();

    const float delSampleL = gain * (s_delay.read(288 + (240 * lfo_cycle)));
    const float delSampleR = gain * (s_delay.read(288 + (240 * lfo_cycle)));
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
200191a4:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
    wetXNR = wet * delSampleR;
    // As of now I'm unsure why this is working properly, but my previous version wasn't..
    *x += wetXNL;
200191a8:	ed14 7a02 	vldr	s14, [r4, #-8]
200191ac:	ee77 7a87 	vadd.f32	s15, s15, s14
    *(x + 1) += wetXNR;
200191b0:	ed14 7a01 	vldr	s14, [r4, #-4]
    const float delSampleR = gain * (s_delay.read(288 + (240 * lfo_cycle)));
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
    wetXNR = wet * delSampleR;
    // As of now I'm unsure why this is working properly, but my previous version wasn't..
    *x += wetXNL;
200191b4:	ed44 7a02 	vstr	s15, [r4, #-8]
    *(x + 1) += wetXNR;
200191b8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
200191bc:	ee37 7a26 	vadd.f32	s14, s14, s13
200191c0:	eb07 0080 	add.w	r0, r7, r0, lsl #2
200191c4:	ea02 020e 	and.w	r2, r2, lr
200191c8:	ed04 7a01 	vstr	s14, [r4, #-4]
200191cc:	eb07 0282 	add.w	r2, r7, r2, lsl #2
200191d0:	edc0 7a00 	vstr	s15, [r0]
    s_delay.write(*x);
    s_delay.write(*(x + 1));
200191d4:	f854 0c04 	ldr.w	r0, [r4, #-4]
200191d8:	6010      	str	r0, [r2, #0]
  const float * x_e = x + 2*frames;

  const float wet = s_mix;
  const float dry = 1.f - s_mix;

  for (; x != x_e ; x+=2) 
200191da:	464a      	mov	r2, r9
200191dc:	4620      	mov	r0, r4
200191de:	e7ae      	b.n	2001913e <_hook_process+0x36>
200191e0:	08c9      	lsrs	r1, r1, #3
200191e2:	fb06 8601 	mla	r6, r6, r1, r8
200191e6:	eba5 0141 	sub.w	r1, r5, r1, lsl #1
200191ea:	615e      	str	r6, [r3, #20]
200191ec:	6119      	str	r1, [r3, #16]
200191ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
200191f2:	bf00      	nop
200191f4:	20019280 	.word	0x20019280
200191f8:	30000000 	.word	0x30000000
200191fc:	43700000 	.word	0x43700000
20019200:	43900000 	.word	0x43900000

20019204 <_hook_param>:
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
20019204:	ee07 1a90 	vmov	s15, r1
  switch (index) 
20019208:	2801      	cmp	r0, #1
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
2001920a:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
  switch (index) 
2001920e:	d007      	beq.n	20019220 <_hook_param+0x1c>
20019210:	d302      	bcc.n	20019218 <_hook_param+0x14>
20019212:	2803      	cmp	r0, #3
20019214:	d013      	beq.n	2001923e <_hook_param+0x3a>
20019216:	4770      	bx	lr
  {
  case k_user_delfx_param_time:
    // Gain == Feedback //
    gain = valf;
20019218:	4b0b      	ldr	r3, [pc, #44]	; (20019248 <_hook_param+0x44>)
2001921a:	edc3 7a08 	vstr	s15, [r3, #32]
    break;
2001921e:	4770      	bx	lr
  case k_user_delfx_param_depth:
    lfo_speed = valf * 2.f;
20019220:	ee77 7aa7 	vadd.f32	s15, s15, s15
20019224:	4b09      	ldr	r3, [pc, #36]	; (2001924c <_hook_param+0x48>)
     * param fsrecip Reciprocal of sampling frequency (1/Fs)
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setF0(const float f0, const float fsrecip) 
    {
      w0 = f32_to_q31(2.f * f0 * fsrecip);
20019226:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 20019250 <_hook_param+0x4c>
2001922a:	edc3 7a00 	vstr	s15, [r3]
2001922e:	ee67 7a87 	vmul.f32	s15, s15, s14
20019232:	4b05      	ldr	r3, [pc, #20]	; (20019248 <_hook_param+0x44>)
20019234:	eefe 7ac0 	vcvt.s32.f32	s15, s15, #32
20019238:	edc3 7a06 	vstr	s15, [r3, #24]
2001923c:	4770      	bx	lr
    s_lfo.setF0(lfo_speed, k_samplerate_recipf);
    break;
  case k_user_delfx_param_shift_depth:
    // Mix Val
    s_mix = valf;
2001923e:	4b02      	ldr	r3, [pc, #8]	; (20019248 <_hook_param+0x44>)
20019240:	edc3 7a07 	vstr	s15, [r3, #28]
20019244:	4770      	bx	lr
20019246:	bf00      	nop
20019248:	20019280 	.word	0x20019280
2001924c:	20019278 	.word	0x20019278
20019250:	37aec33e 	.word	0x37aec33e

20019254 <_GLOBAL__sub_I_lfo_speed>:
    DelayLine(void) :
      mLine(0),
      mFracZ(0),
      mSize(0),
      mMask(0),
      mWriteIdx(0)
20019254:	4b06      	ldr	r3, [pc, #24]	; (20019270 <_GLOBAL__sub_I_lfo_speed+0x1c>)
20019256:	2100      	movs	r1, #0
20019258:	2200      	movs	r2, #0
2001925a:	6059      	str	r1, [r3, #4]

    /**
     * Default constructor
     */
    SimpleLFO(void) :
      phi0(0x80000000), w0(0)
2001925c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
20019260:	601a      	str	r2, [r3, #0]
20019262:	609a      	str	r2, [r3, #8]
20019264:	60da      	str	r2, [r3, #12]
20019266:	611a      	str	r2, [r3, #16]
20019268:	6159      	str	r1, [r3, #20]
2001926a:	619a      	str	r2, [r3, #24]
2001926c:	4770      	bx	lr
2001926e:	bf00      	nop
20019270:	20019280 	.word	0x20019280
