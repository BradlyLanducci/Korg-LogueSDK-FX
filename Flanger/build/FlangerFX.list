
build/FlangerFX.elf:     file format elf32-littlearm


Disassembly of section .text:

20019048 <_text_start>:
20019048:	4770      	bx	lr

2001904a <_hook_resume>:
2001904a:	4770      	bx	lr
2001904c:	4770      	bx	lr

2001904e <_hook_suspend>:
2001904e:	4770      	bx	lr
20019050:	4770      	bx	lr

20019052 <_entry>:
20019052:	4b10      	ldr	r3, [pc, #64]	; (20019094 <_entry+0x42>)
20019054:	4a10      	ldr	r2, [pc, #64]	; (20019098 <_entry+0x46>)
20019056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2001905a:	4688      	mov	r8, r1
2001905c:	4607      	mov	r7, r0
2001905e:	2100      	movs	r1, #0
20019060:	4293      	cmp	r3, r2
20019062:	d002      	beq.n	2001906a <_entry+0x18>
20019064:	f803 1f01 	strb.w	r1, [r3, #1]!
20019068:	e7fa      	b.n	20019060 <_entry+0xe>
2001906a:	4b0c      	ldr	r3, [pc, #48]	; (2001909c <_entry+0x4a>)
2001906c:	4c0c      	ldr	r4, [pc, #48]	; (200190a0 <_entry+0x4e>)
2001906e:	1ae4      	subs	r4, r4, r3
20019070:	10a4      	asrs	r4, r4, #2
20019072:	2500      	movs	r5, #0
20019074:	461e      	mov	r6, r3
20019076:	42a5      	cmp	r5, r4
20019078:	d005      	beq.n	20019086 <_entry+0x34>
2001907a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
2001907e:	b103      	cbz	r3, 20019082 <_entry+0x30>
20019080:	4798      	blx	r3
20019082:	3501      	adds	r5, #1
20019084:	e7f7      	b.n	20019076 <_entry+0x24>
20019086:	4641      	mov	r1, r8
20019088:	4638      	mov	r0, r7
2001908a:	f000 f80b 	bl	200190a4 <_hook_init>
2001908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20019092:	bf00      	nop
20019094:	200192df 	.word	0x200192df
20019098:	20019313 	.word	0x20019313
2001909c:	20019040 	.word	0x20019040
200190a0:	20019044 	.word	0x20019044

200190a4 <_hook_init>:

/*
  Give the s_delay_ram to s_delay object, instantiate variables
*/
void DELFX_INIT(uint32_t platform, uint32_t api)
{
200190a4:	b510      	push	{r4, lr}
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190a6:	4c1c      	ldr	r4, [pc, #112]	; (20019118 <_hook_init+0x74>)
200190a8:	4a1c      	ldr	r2, [pc, #112]	; (2001911c <_hook_init+0x78>)
200190aa:	6022      	str	r2, [r4, #0]
      mSize = nextpow2_u32(line_size); // must be power of 2
200190ac:	f44f 2380 	mov.w	r3, #262144	; 0x40000
200190b0:	60a3      	str	r3, [r4, #8]
      mMask = (mSize-1);
200190b2:	3b01      	subs	r3, #1
200190b4:	60e3      	str	r3, [r4, #12]
      mWriteIdx = 0;
200190b6:	2300      	movs	r3, #0
200190b8:	6123      	str	r3, [r4, #16]
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
    REP4(*(ptr++) = 0);
200190ba:	2100      	movs	r1, #0
200190bc:	f102 0310 	add.w	r3, r2, #16
200190c0:	f102 1210 	add.w	r2, r2, #1048592	; 0x100010
200190c4:	f843 1c10 	str.w	r1, [r3, #-16]
200190c8:	f843 1c0c 	str.w	r1, [r3, #-12]
200190cc:	f843 1c08 	str.w	r1, [r3, #-8]
200190d0:	f843 1c04 	str.w	r1, [r3, #-4]
200190d4:	3310      	adds	r3, #16
static inline __attribute__((optimize("Ofast"),always_inline))
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
200190d6:	429a      	cmp	r2, r3
200190d8:	d1f4      	bne.n	200190c4 <_hook_init+0x20>
     * Reset phase
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void reset(void) 
    {
      phi0 = 0x80000000;
200190da:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
200190de:	6163      	str	r3, [r4, #20]
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  s_lfo.reset();
  bpm = _fx_get_bpm();
200190e0:	f000 f8f6 	bl	200192d0 <___fx_get_bpm_veneer>
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190e4:	230a      	movs	r3, #10
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  s_lfo.reset();
  bpm = _fx_get_bpm();
200190e6:	61e0      	str	r0, [r4, #28]
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
200190e8:	fb90 f0f3 	sdiv	r0, r0, r3
200190ec:	233c      	movs	r3, #60	; 0x3c
200190ee:	fb93 f0f0 	sdiv	r0, r3, r0
200190f2:	4b0b      	ldr	r3, [pc, #44]	; (20019120 <_hook_init+0x7c>)
     * param fsrecip Reciprocal of sampling frequency (1/Fs)
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setF0(const float f0, const float fsrecip) 
    {
      w0 = f32_to_q31(2.f * f0 * fsrecip);
200190f4:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 20019124 <_hook_init+0x80>
200190f8:	4358      	muls	r0, r3
  s_mix = .5f;
200190fa:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
200190fe:	6263      	str	r3, [r4, #36]	; 0x24
  s_lfo.setF0(lfo_speed, k_samplerate_recipf);
20019100:	4b09      	ldr	r3, [pc, #36]	; (20019128 <_hook_init+0x84>)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  s_lfo.reset();
  bpm = _fx_get_bpm();
  s_len = (60 / (bpm / 10) * BUF_SIZE) * 32;
20019102:	6220      	str	r0, [r4, #32]
20019104:	edd3 7a00 	vldr	s15, [r3]
20019108:	ee67 7a87 	vmul.f32	s15, s15, s14
2001910c:	eefe 7ac0 	vcvt.s32.f32	s15, s15, #32
20019110:	edc4 7a06 	vstr	s15, [r4, #24]
20019114:	bd10      	pop	{r4, pc}
20019116:	bf00      	nop
20019118:	200192e0 	.word	0x200192e0
2001911c:	c0420000 	.word	0xc0420000
20019120:	00668a00 	.word	0x00668a00
20019124:	37aec33e 	.word	0x37aec33e
20019128:	200192d8 	.word	0x200192d8

2001912c <_hook_process>:
{
    return 1.5f * in - 0.5f * in *in * in;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
2001912c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;

  const float wet = s_mix;
20019130:	4a48      	ldr	r2, [pc, #288]	; (20019254 <_hook_process+0x128>)
     * Get value of bipolar sine wave for current phase 
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float sine_bi(void) 
    {
      const float phif = q31_to_f32(phi0);
20019132:	ed9f 4a49 	vldr	s8, [pc, #292]	; 20019258 <_hook_process+0x12c>
     * Step phase one cycle forward
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void cycle(void)
    {
      phi0 += w0;
20019136:	f8d2 9018 	ldr.w	r9, [r2, #24]
2001913a:	f8d2 c014 	ldr.w	ip, [r2, #20]
2001913e:	6915      	ldr	r5, [r2, #16]
20019140:	ed92 6a09 	vldr	s12, [r2, #36]	; 0x24
     * @param pos Offset from write index
     * @return Sample at given position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float read(const uint32_t pos) {
      return mLine[(mWriteIdx + pos) & mMask];
20019144:	6816      	ldr	r6, [r2, #0]
20019146:	68d7      	ldr	r7, [r2, #12]
  const float dry = 1.f - s_mix;

  for (; x != x_e ; x+=2) 
  {
    const float delSampleL = gain * (s_delay.read(240) * s_lfo.sine_bi());
20019148:	edd2 5a0a 	vldr	s11, [r2, #40]	; 0x28
    s_lfo.cycle();
    const float delSampleR = gain * (s_delay.read(239) * s_lfo.sine_bi());
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
    wetXNR = wet * delSampleR;
    *x += 0.f;
2001914c:	eddf 3a43 	vldr	s7, [pc, #268]	; 2001925c <_hook_process+0x130>
  {
    const float delSampleL = gain * (s_delay.read(240) * s_lfo.sine_bi());
    s_lfo.cycle();
    const float delSampleR = gain * (s_delay.read(239) * s_lfo.sine_bi());
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
20019150:	9201      	str	r2, [sp, #4]
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
  float * __restrict x = xn;
  const float * x_e = x + 2*frames;
20019152:	00c9      	lsls	r1, r1, #3
20019154:	eb00 0b01 	add.w	fp, r0, r1
20019158:	ea4f 0849 	mov.w	r8, r9, lsl #1
2001915c:	46e6      	mov	lr, ip
2001915e:	462b      	mov	r3, r5

  for (; x != x_e ; x+=2) 
  {
    const float delSampleL = gain * (s_delay.read(240) * s_lfo.sine_bi());
    s_lfo.cycle();
    const float delSampleR = gain * (s_delay.read(239) * s_lfo.sine_bi());
20019160:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
20019164:	eeb1 5a00 	vmov.f32	s10, #16	; 0x40800000  4.0
  const float * x_e = x + 2*frames;

  const float wet = s_mix;
  const float dry = 1.f - s_mix;

  for (; x != x_e ; x+=2) 
20019168:	4583      	cmp	fp, r0
2001916a:	ee07 ea10 	vmov	s14, lr
2001916e:	f100 0408 	add.w	r4, r0, #8
20019172:	f1a3 0202 	sub.w	r2, r3, #2
20019176:	44c6      	add	lr, r8
20019178:	d060      	beq.n	2001923c <_hook_process+0x110>
     * Get value of bipolar sine wave for current phase 
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float sine_bi(void) 
    {
      const float phif = q31_to_f32(phi0);
2001917a:	ebc9 000e 	rsb	r0, r9, lr
2001917e:	ee07 0a90 	vmov	s15, r0
20019182:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
20019186:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2001918a:	ee67 6a04 	vmul.f32	s13, s14, s8
2001918e:	ee27 7a84 	vmul.f32	s14, s15, s8
20019192:	f103 00ef 	add.w	r0, r3, #239	; 0xef
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float si_fabsf(float x)
{
  f32_t xs = {x};
  xs.i &= 0x7fffffff;
20019196:	ee17 aa10 	vmov	sl, s14
2001919a:	f02a 4a00 	bic.w	sl, sl, #2147483648	; 0x80000000
2001919e:	ee07 aa90 	vmov	s15, sl
  {
    const float delSampleL = gain * (s_delay.read(240) * s_lfo.sine_bi());
    s_lfo.cycle();
    const float delSampleR = gain * (s_delay.read(239) * s_lfo.sine_bi());
200191a2:	ee77 7ae4 	vsub.f32	s15, s15, s9
200191a6:	4038      	ands	r0, r7
200191a8:	ee67 7a87 	vmul.f32	s15, s15, s14
200191ac:	eb06 0080 	add.w	r0, r6, r0, lsl #2
200191b0:	ee16 aa90 	vmov	sl, s13
200191b4:	ed90 7a00 	vldr	s14, [r0]
200191b8:	ee67 7a85 	vmul.f32	s15, s15, s10
200191bc:	f02a 4a00 	bic.w	sl, sl, #2147483648	; 0x80000000
200191c0:	ee67 7a87 	vmul.f32	s15, s15, s14
200191c4:	ee07 aa10 	vmov	s14, sl
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
200191c8:	ee37 7a64 	vsub.f32	s14, s14, s9
200191cc:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
200191d0:	ee27 7a26 	vmul.f32	s14, s14, s13
200191d4:	4038      	ands	r0, r7
200191d6:	eb06 0080 	add.w	r0, r6, r0, lsl #2
200191da:	edd0 6a00 	vldr	s13, [r0]
200191de:	9801      	ldr	r0, [sp, #4]
200191e0:	ee27 7a05 	vmul.f32	s14, s14, s10

  for (; x != x_e ; x+=2) 
  {
    const float delSampleL = gain * (s_delay.read(240) * s_lfo.sine_bi());
    s_lfo.cycle();
    const float delSampleR = gain * (s_delay.read(239) * s_lfo.sine_bi());
200191e4:	ee67 7aa5 	vmul.f32	s15, s15, s11
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
200191e8:	ee27 7a26 	vmul.f32	s14, s14, s13
    wetXNR = wet * delSampleR;
200191ec:	ee66 7a27 	vmul.f32	s15, s12, s15
  {
    const float delSampleL = gain * (s_delay.read(240) * s_lfo.sine_bi());
    s_lfo.cycle();
    const float delSampleR = gain * (s_delay.read(239) * s_lfo.sine_bi());
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
200191f0:	ee27 7a25 	vmul.f32	s14, s14, s11
    wetXNR = wet * delSampleR;
200191f4:	edc0 7a0c 	vstr	s15, [r0, #48]	; 0x30
  {
    const float delSampleL = gain * (s_delay.read(240) * s_lfo.sine_bi());
    s_lfo.cycle();
    const float delSampleR = gain * (s_delay.read(239) * s_lfo.sine_bi());
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
200191f8:	ee27 7a06 	vmul.f32	s14, s14, s12
200191fc:	ed80 7a0b 	vstr	s14, [r0, #44]	; 0x2c
    wetXNR = wet * delSampleR;
    *x += 0.f;
20019200:	ed54 7a02 	vldr	s15, [r4, #-8]
    *(x + 1) += wetXNR;
20019204:	ed14 7a01 	vldr	s14, [r4, #-4]
    s_lfo.cycle();
    const float delSampleR = gain * (s_delay.read(239) * s_lfo.sine_bi());
    s_lfo.cycle();
    wetXNL = wet * delSampleL;
    wetXNR = wet * delSampleR;
    *x += 0.f;
20019208:	ee77 7aa3 	vadd.f32	s15, s15, s7
2001920c:	ed44 7a02 	vstr	s15, [r4, #-8]
    *(x + 1) += wetXNR;
20019210:	edd0 6a0c 	vldr	s13, [r0, #48]	; 0x30
     *
     * @param s Sample to write
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void write(const float s) {
      mLine[(mWriteIdx--) & mMask] = s;
20019214:	ea07 0003 	and.w	r0, r7, r3
20019218:	ee37 7a26 	vadd.f32	s14, s14, s13
2001921c:	3b01      	subs	r3, #1
2001921e:	eb06 0080 	add.w	r0, r6, r0, lsl #2
20019222:	403b      	ands	r3, r7
20019224:	ed04 7a01 	vstr	s14, [r4, #-4]
20019228:	eb06 0383 	add.w	r3, r6, r3, lsl #2
2001922c:	edc0 7a00 	vstr	s15, [r0]
    s_delay.write(*x);
    s_delay.write(*(x + 1));
20019230:	f854 0c04 	ldr.w	r0, [r4, #-4]
20019234:	6018      	str	r0, [r3, #0]
  const float * x_e = x + 2*frames;

  const float wet = s_mix;
  const float dry = 1.f - s_mix;

  for (; x != x_e ; x+=2) 
20019236:	4613      	mov	r3, r2
20019238:	4620      	mov	r0, r4
2001923a:	e795      	b.n	20019168 <_hook_process+0x3c>
2001923c:	4b05      	ldr	r3, [pc, #20]	; (20019254 <_hook_process+0x128>)
2001923e:	08c9      	lsrs	r1, r1, #3
20019240:	eba5 0541 	sub.w	r5, r5, r1, lsl #1
20019244:	fb08 c101 	mla	r1, r8, r1, ip
20019248:	611d      	str	r5, [r3, #16]
2001924a:	6159      	str	r1, [r3, #20]
    *x += 0.f;
    *(x + 1) += wetXNR;
    s_delay.write(*x);
    s_delay.write(*(x + 1));
  }
}
2001924c:	b003      	add	sp, #12
2001924e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
20019252:	bf00      	nop
20019254:	200192e0 	.word	0x200192e0
20019258:	30000000 	.word	0x30000000
2001925c:	00000000 	.word	0x00000000

20019260 <_hook_param>:

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
20019260:	ee07 1a90 	vmov	s15, r1
  switch (index) 
20019264:	2801      	cmp	r0, #1
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
20019266:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
  switch (index) 
2001926a:	d007      	beq.n	2001927c <_hook_param+0x1c>
2001926c:	d302      	bcc.n	20019274 <_hook_param+0x14>
2001926e:	2803      	cmp	r0, #3
20019270:	d013      	beq.n	2001929a <_hook_param+0x3a>
20019272:	4770      	bx	lr
  {
  case 0:
    // Gain == Feedback //
    gain = valf;
20019274:	4b0b      	ldr	r3, [pc, #44]	; (200192a4 <_hook_param+0x44>)
20019276:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    break;
2001927a:	4770      	bx	lr
  case 1:
    lfo_speed = valf * 2.f;
2001927c:	ee77 7aa7 	vadd.f32	s15, s15, s15
20019280:	4b09      	ldr	r3, [pc, #36]	; (200192a8 <_hook_param+0x48>)
     * param fsrecip Reciprocal of sampling frequency (1/Fs)
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setF0(const float f0, const float fsrecip) 
    {
      w0 = f32_to_q31(2.f * f0 * fsrecip);
20019282:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 200192ac <_hook_param+0x4c>
20019286:	edc3 7a00 	vstr	s15, [r3]
2001928a:	ee67 7a87 	vmul.f32	s15, s15, s14
2001928e:	4b05      	ldr	r3, [pc, #20]	; (200192a4 <_hook_param+0x44>)
20019290:	eefe 7ac0 	vcvt.s32.f32	s15, s15, #32
20019294:	edc3 7a06 	vstr	s15, [r3, #24]
20019298:	4770      	bx	lr
    s_lfo.setF0(lfo_speed, k_samplerate_recipf);
    break;
  case 3:
    // Mix Val
    s_mix = valf;
2001929a:	4b02      	ldr	r3, [pc, #8]	; (200192a4 <_hook_param+0x44>)
2001929c:	edc3 7a09 	vstr	s15, [r3, #36]	; 0x24
200192a0:	4770      	bx	lr
200192a2:	bf00      	nop
200192a4:	200192e0 	.word	0x200192e0
200192a8:	200192d8 	.word	0x200192d8
200192ac:	37aec33e 	.word	0x37aec33e

200192b0 <_GLOBAL__sub_I_lfo_speed>:
    DelayLine(void) :
      mLine(0),
      mFracZ(0),
      mSize(0),
      mMask(0),
      mWriteIdx(0)
200192b0:	4b06      	ldr	r3, [pc, #24]	; (200192cc <_GLOBAL__sub_I_lfo_speed+0x1c>)
200192b2:	2100      	movs	r1, #0
200192b4:	2200      	movs	r2, #0
200192b6:	6059      	str	r1, [r3, #4]

    /**
     * Default constructor
     */
    SimpleLFO(void) :
      phi0(0x80000000), w0(0)
200192b8:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
200192bc:	601a      	str	r2, [r3, #0]
200192be:	609a      	str	r2, [r3, #8]
200192c0:	60da      	str	r2, [r3, #12]
200192c2:	611a      	str	r2, [r3, #16]
200192c4:	6159      	str	r1, [r3, #20]
200192c6:	619a      	str	r2, [r3, #24]
200192c8:	4770      	bx	lr
200192ca:	bf00      	nop
200192cc:	200192e0 	.word	0x200192e0

200192d0 <___fx_get_bpm_veneer>:
200192d0:	f85f f000 	ldr.w	pc, [pc]	; 200192d4 <___fx_get_bpm_veneer+0x4>
200192d4:	0807ca89 	.word	0x0807ca89
