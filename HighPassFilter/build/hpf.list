
build/HPF.elf:     file format elf32-littlearm


Disassembly of section .text:

20019044 <_text_start>:

__attribute__((weak))
void _hook_process(const float *main_xn, float *main_yn,
                   const float *sub_xn, float *sub_yn,
                   uint32_t frames)
{
20019044:	4770      	bx	lr

20019046 <_hook_resume>:

}

__attribute__((weak))
void _hook_resume(void)
{
20019046:	4770      	bx	lr

}

__attribute__((weak))
void _hook_param(uint8_t index, int32_t value)
{
20019048:	4770      	bx	lr

2001904a <_hook_suspend>:
2001904a:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
2001904c:	4770      	bx	lr

2001904e <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2001904e:	4b10      	ldr	r3, [pc, #64]	; (20019090 <_entry+0x42>)
20019050:	4a10      	ldr	r2, [pc, #64]	; (20019094 <_entry+0x46>)
20019052:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20019056:	4688      	mov	r8, r1
20019058:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2001905a:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
2001905c:	4293      	cmp	r3, r2
2001905e:	d002      	beq.n	20019066 <_entry+0x18>
    *(bss_p++) = 0;
20019060:	f803 1f01 	strb.w	r1, [r3, #1]!
20019064:	e7fa      	b.n	2001905c <_entry+0xe>
20019066:	4b0c      	ldr	r3, [pc, #48]	; (20019098 <_entry+0x4a>)
20019068:	4c0c      	ldr	r4, [pc, #48]	; (2001909c <_entry+0x4e>)
2001906a:	1ae4      	subs	r4, r4, r3
2001906c:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2001906e:	2500      	movs	r5, #0
20019070:	461e      	mov	r6, r3
20019072:	42a5      	cmp	r5, r4
20019074:	d005      	beq.n	20019082 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20019076:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2001907a:	b103      	cbz	r3, 2001907e <_entry+0x30>
      init_p();
2001907c:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2001907e:	3501      	adds	r5, #1
20019080:	e7f7      	b.n	20019072 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20019082:	4641      	mov	r1, r8
20019084:	4638      	mov	r0, r7
20019086:	f000 f80b 	bl	200190a0 <_hook_init>
2001908a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001908e:	bf00      	nop
20019090:	2001939f 	.word	0x2001939f
20019094:	200193e7 	.word	0x200193e7
20019098:	20019040 	.word	0x20019040
2001909c:	20019044 	.word	0x20019044

200190a0 <_hook_init>:
float z = 0.f;
float a = 0.05f;
float b = 1.f - a;

void MODFX_INIT(uint32_t platform, uint32_t api)
{
200190a0:	b530      	push	{r4, r5, lr}
  filter_l.flush();
  filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
200190a2:	4c2b      	ldr	r4, [pc, #172]	; (20019150 <_hook_init+0xb0>)
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float fx_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200190a4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 20019154 <_hook_init+0xb4>
200190a8:	edd4 7a00 	vldr	s15, [r4]
    const uint32_t idx = (uint32_t)idxf;
    const float y0 = tanpi_lut_f[idx];
200190ac:	492a      	ldr	r1, [pc, #168]	; (20019158 <_hook_init+0xb8>)
    /**
     * Flush internal delays
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void flush(void) {
      mZ1 = mZ2 = 0;
200190ae:	4b2b      	ldr	r3, [pc, #172]	; (2001915c <_hook_init+0xbc>)
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float fx_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200190b0:	ee27 7a87 	vmul.f32	s14, s15, s14
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
200190b4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    const uint32_t idx = (uint32_t)idxf;
200190b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    /**
     * Flush internal delays
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void flush(void) {
      mZ1 = mZ2 = 0;
200190bc:	2200      	movs	r2, #0
200190be:	ee17 0a90 	vmov	r0, s15

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200190c2:	ee06 0a90 	vmov	s13, r0
200190c6:	eef8 6a66 	vcvt.f32.u32	s13, s13
    const float y0 = tanpi_lut_f[idx];
200190ca:	eb01 0580 	add.w	r5, r1, r0, lsl #2
200190ce:	edd5 7a00 	vldr	s15, [r5]
200190d2:	619a      	str	r2, [r3, #24]
200190d4:	ee37 7a66 	vsub.f32	s14, s14, s13
200190d8:	edd5 6a01 	vldr	s13, [r5, #4]
200190dc:	615a      	str	r2, [r3, #20]
200190de:	ee76 6ae7 	vsub.f32	s13, s13, s15
  filter_r.flush();
  filter_r.mCoeffs = filter_l.mCoeffs;
200190e2:	f103 051c 	add.w	r5, r3, #28
200190e6:	eee7 7a26 	vfma.f32	s15, s14, s13
200190ea:	635a      	str	r2, [r3, #52]	; 0x34
200190ec:	631a      	str	r2, [r3, #48]	; 0x30
float b = 1.f - a;

void MODFX_INIT(uint32_t platform, uint32_t api)
{
  filter_l.flush();
  filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
200190ee:	edd4 6a01 	vldr	s13, [r4, #4]
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
200190f2:	ee66 5aa7 	vmul.f32	s11, s13, s15
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
200190f6:	eeb0 7a67 	vmov.f32	s14, s15
200190fa:	eea5 7aa7 	vfma.f32	s14, s11, s15
  filter_r.flush();
  filter_r.mCoeffs = filter_l.mCoeffs;
200190fe:	461c      	mov	r4, r3
20019100:	ee37 7a26 	vadd.f32	s14, s14, s13
20019104:	ee85 6a07 	vdiv.f32	s12, s10, s14
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
20019108:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
2001910c:	ee26 7a86 	vmul.f32	s14, s13, s12
20019110:	ed83 7a02 	vstr	s14, [r3, #8]
20019114:	ed83 7a00 	vstr	s14, [r3]
        ff1 = -2.f * ff0;
20019118:	ee27 7a05 	vmul.f32	s14, s14, s10
2001911c:	ed83 7a01 	vstr	s14, [r3, #4]
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20019120:	eeb0 7a66 	vmov.f32	s14, s13
20019124:	ee95 7aa7 	vfnms.f32	s14, s11, s15
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20019128:	eed5 7aa7 	vfnms.f32	s15, s11, s15
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
2001912c:	ee27 7a06 	vmul.f32	s14, s14, s12
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20019130:	ee77 7aa6 	vadd.f32	s15, s15, s13
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20019134:	ee37 7a07 	vadd.f32	s14, s14, s14
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20019138:	ee67 7a86 	vmul.f32	s15, s15, s12
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
2001913c:	ed83 7a03 	vstr	s14, [r3, #12]
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20019140:	edc3 7a04 	vstr	s15, [r3, #16]
20019144:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
20019146:	c50f      	stmia	r5!, {r0, r1, r2, r3}
20019148:	6823      	ldr	r3, [r4, #0]
2001914a:	602b      	str	r3, [r5, #0]
2001914c:	bd30      	pop	{r4, r5, pc}
2001914e:	bf00      	nop
20019150:	20019390 	.word	0x20019390
20019154:	44029cbc 	.word	0x44029cbc
20019158:	0807b504 	.word	0x0807b504
2001915c:	200193a0 	.word	0x200193a0

20019160 <_Z8absolutef>:
}

float absolute(float valf)
{
  if (valf < 0)
20019160:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
20019164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return -valf;
20019168:	bf48      	it	mi
2001916a:	eeb1 0a40 	vnegmi.f32	s0, s0
  return valf;
}
2001916e:	4770      	bx	lr

20019170 <_hook_process>:

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
20019170:	b530      	push	{r4, r5, lr}
20019172:	9d03      	ldr	r5, [sp, #12]
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
20019174:	4b27      	ldr	r3, [pc, #156]	; (20019214 <_hook_process+0xa4>)
 for (int i = 0; i < frames; i++)
20019176:	2200      	movs	r2, #0
20019178:	42aa      	cmp	r2, r5
2001917a:	f100 0008 	add.w	r0, r0, #8
2001917e:	f101 0108 	add.w	r1, r1, #8
20019182:	d046      	beq.n	20019212 <_hook_process+0xa2>
  {
    curSampleL = *xn++;
20019184:	ed50 6a02 	vldr	s13, [r0, #-8]
20019188:	ed93 7a00 	vldr	s14, [r3]
2001918c:	edd3 7a05 	vldr	s15, [r3, #20]
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20019190:	ed93 5a01 	vldr	s10, [r3, #4]
    curSampleR = *xn++;
20019194:	ed10 6a01 	vldr	s12, [r0, #-4]
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
20019198:	edd3 5a02 	vldr	s11, [r3, #8]
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
2001919c:	eee6 7a87 	vfma.f32	s15, s13, s14

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
 for (int i = 0; i < frames; i++)
200191a0:	3201      	adds	r2, #1
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200191a2:	ed93 7a06 	vldr	s14, [r3, #24]
  {
    curSampleL = *xn++;
    curSampleR = *xn++;

    curSampleL = filter_l.process_so(curSampleL);
200191a6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
200191aa:	eea6 7a85 	vfma.f32	s14, s13, s10
200191ae:	ed93 5a03 	vldr	s10, [r3, #12]
200191b2:	eea7 7ac5 	vfms.f32	s14, s15, s10
200191b6:	ed93 5a08 	vldr	s10, [r3, #32]
200191ba:	ed83 7a05 	vstr	s14, [r3, #20]
      mZ2 -= mCoeffs.fb2 * acc;
200191be:	ed93 7a04 	vldr	s14, [r3, #16]
200191c2:	ee27 7a67 	vnmul.f32	s14, s14, s15
200191c6:	eea6 7aa5 	vfma.f32	s14, s13, s11
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200191ca:	edd3 6a07 	vldr	s13, [r3, #28]
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
      mZ2 -= mCoeffs.fb2 * acc;
200191ce:	ed83 7a06 	vstr	s14, [r3, #24]
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200191d2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
200191d6:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200191da:	eea6 7a26 	vfma.f32	s14, s12, s13
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200191de:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
    curSampleR = filter_r.process_so(curSampleR);
200191e2:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
200191e6:	eee6 6a05 	vfma.f32	s13, s12, s10
200191ea:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
200191ee:	eee7 6a45 	vfms.f32	s13, s14, s10
200191f2:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
      mZ2 -= mCoeffs.fb2 * acc;
200191f6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
200191fa:	ee66 6ac7 	vnmul.f32	s13, s13, s14
200191fe:	eee6 6a25 	vfma.f32	s13, s12, s11
20019202:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34

    *yn++ = curSampleL;
20019206:	ed41 7a02 	vstr	s15, [r1, #-8]
    *yn++ = curSampleR;
2001920a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
2001920c:	f841 4c04 	str.w	r4, [r1, #-4]

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
 for (int i = 0; i < frames; i++)
20019210:	e7b2      	b.n	20019178 <_hook_process+0x8>
20019212:	bd30      	pop	{r4, r5, pc}
20019214:	200193a0 	.word	0x200193a0

20019218 <_hook_param>:
  z = (in * b) + (z * a);
  return z;
}

void MODFX_PARAM(uint8_t index, int32_t value)
{
20019218:	b530      	push	{r4, r5, lr}
2001921a:	ee07 1a90 	vmov	s15, r1
  const float valf = q31_to_f32(value);
  float invertedValf;
  float range = 0;
  switch (index) 
2001921e:	2800      	cmp	r0, #0
20019220:	f040 8089 	bne.w	20019336 <_hook_param+0x11e>
  {
  case 0:
    invertedValf = absolute(1-valf);
20019224:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
20019228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
2001922c:	ed9f 7a42 	vldr	s14, [pc, #264]	; 20019338 <_hook_param+0x120>
  }
}

float __fast_inline smooth(float in)
{
  z = (in * b) + (z * a);
20019230:	4b42      	ldr	r3, [pc, #264]	; (2001933c <_hook_param+0x124>)
20019232:	4943      	ldr	r1, [pc, #268]	; (20019340 <_hook_param+0x128>)
20019234:	4a43      	ldr	r2, [pc, #268]	; (20019344 <_hook_param+0x12c>)
  float invertedValf;
  float range = 0;
  switch (index) 
  {
  case 0:
    invertedValf = absolute(1-valf);
20019236:	eeb0 6a66 	vmov.f32	s12, s13
2001923a:	eea7 6ac7 	vfms.f32	s12, s15, s14
    range = clipminmaxf(0.001f, invertedValf, 1.f);
    cutoff = (1 / range) * 0.00046875;
    cutoff = smooth(cutoff);
    filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
    filter_r.mCoeffs = filter_l.mCoeffs;
2001923e:	f103 051c 	add.w	r5, r3, #28

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20019242:	ed9f 7a41 	vldr	s14, [pc, #260]	; 20019348 <_hook_param+0x130>
  filter_r.mCoeffs = filter_l.mCoeffs;
}

float absolute(float valf)
{
  if (valf < 0)
20019246:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
2001924a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float invertedValf;
  float range = 0;
  switch (index) 
  {
  case 0:
    invertedValf = absolute(1-valf);
2001924e:	eef0 7a46 	vmov.f32	s15, s12
}

float absolute(float valf)
{
  if (valf < 0)
    return -valf;
20019252:	bf48      	it	mi
20019254:	eef1 7a46 	vnegmi.f32	s15, s12
20019258:	ee37 6ac7 	vsub.f32	s12, s15, s14
2001925c:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
20019260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20019264:	bfb8      	it	lt
20019266:	eef0 7a47 	vmovlt.f32	s15, s14
2001926a:	ee37 7ae6 	vsub.f32	s14, s15, s13
  }
}

float __fast_inline smooth(float in)
{
  z = (in * b) + (z * a);
2001926e:	ed91 6a02 	vldr	s12, [r1, #8]
20019272:	eeb5 7a40 	vcmp.f32	s14, #0.0
20019276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
2001927a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
2001927e:	bfa8      	it	ge
20019280:	eef0 7a47 	vmovge.f32	s15, s14
20019284:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20019288:	eddf 7a30 	vldr	s15, [pc, #192]	; 2001934c <_hook_param+0x134>
2001928c:	ee27 7a27 	vmul.f32	s14, s14, s15
20019290:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
20019294:	ee67 7a86 	vmul.f32	s15, s15, s12
20019298:	ed93 6a11 	vldr	s12, [r3, #68]	; 0x44
2001929c:	eee7 7a06 	vfma.f32	s15, s14, s12
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float fx_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200192a0:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 20019350 <_hook_param+0x138>
200192a4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
200192a8:	ee27 7a87 	vmul.f32	s14, s15, s14
  {
  case 0:
    invertedValf = absolute(1-valf);
    range = clipminmaxf(0.001f, invertedValf, 1.f);
    cutoff = (1 / range) * 0.00046875;
    cutoff = smooth(cutoff);
200192ac:	edc1 7a00 	vstr	s15, [r1]
    const uint32_t idx = (uint32_t)idxf;
200192b0:	eefc 7ac7 	vcvt.u32.f32	s15, s14
200192b4:	ee17 0a90 	vmov	r0, s15

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200192b8:	ee06 0a10 	vmov	s12, r0
200192bc:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    const float y0 = tanpi_lut_f[idx];
200192c0:	eb02 0480 	add.w	r4, r2, r0, lsl #2
200192c4:	edd4 7a00 	vldr	s15, [r4]
200192c8:	ee37 7a46 	vsub.f32	s14, s14, s12
200192cc:	ed94 6a01 	vldr	s12, [r4, #4]
200192d0:	ee36 6a67 	vsub.f32	s12, s12, s15
    filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
    filter_r.mCoeffs = filter_l.mCoeffs;
200192d4:	461c      	mov	r4, r3
200192d6:	eee7 7a06 	vfma.f32	s15, s14, s12
  case 0:
    invertedValf = absolute(1-valf);
    range = clipminmaxf(0.001f, invertedValf, 1.f);
    cutoff = (1 / range) * 0.00046875;
    cutoff = smooth(cutoff);
    filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
200192da:	ed91 6a01 	vldr	s12, [r1, #4]
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
200192de:	ee26 5a27 	vmul.f32	s10, s12, s15
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
200192e2:	eeb0 7a67 	vmov.f32	s14, s15
200192e6:	eea5 7a27 	vfma.f32	s14, s10, s15
200192ea:	ee37 7a06 	vadd.f32	s14, s14, s12
200192ee:	eec6 5a87 	vdiv.f32	s11, s13, s14
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
200192f2:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
200192f6:	ee26 7a25 	vmul.f32	s14, s12, s11
200192fa:	ed83 7a02 	vstr	s14, [r3, #8]
200192fe:	ed83 7a00 	vstr	s14, [r3]
        ff1 = -2.f * ff0;
20019302:	ee27 7a26 	vmul.f32	s14, s14, s13
20019306:	ed83 7a01 	vstr	s14, [r3, #4]
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
2001930a:	eeb0 7a46 	vmov.f32	s14, s12
2001930e:	ee95 7a27 	vfnms.f32	s14, s10, s15
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20019312:	eed5 7a27 	vfnms.f32	s15, s10, s15
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20019316:	ee27 7a25 	vmul.f32	s14, s14, s11
        fb2 = (qk2 - k + q) * qk2_k_q_r;
2001931a:	ee77 7a86 	vadd.f32	s15, s15, s12
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
2001931e:	ee37 7a07 	vadd.f32	s14, s14, s14
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20019322:	ee67 7aa5 	vmul.f32	s15, s15, s11
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20019326:	ed83 7a03 	vstr	s14, [r3, #12]
        fb2 = (qk2 - k + q) * qk2_k_q_r;
2001932a:	edc3 7a04 	vstr	s15, [r3, #16]
    filter_r.mCoeffs = filter_l.mCoeffs;
2001932e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
20019330:	c50f      	stmia	r5!, {r0, r1, r2, r3}
20019332:	6823      	ldr	r3, [r4, #0]
20019334:	602b      	str	r3, [r5, #0]
20019336:	bd30      	pop	{r4, r5, pc}
20019338:	30000000 	.word	0x30000000
2001933c:	200193a0 	.word	0x200193a0
20019340:	20019390 	.word	0x20019390
20019344:	0807b504 	.word	0x0807b504
20019348:	3a83126f 	.word	0x3a83126f
2001934c:	39f5c28f 	.word	0x39f5c28f
20019350:	44029cbc 	.word	0x44029cbc

20019354 <_GLOBAL__sub_I_curSampleL>:
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20019354:	4b0c      	ldr	r3, [pc, #48]	; (20019388 <_GLOBAL__sub_I_curSampleL+0x34>)
20019356:	2200      	movs	r2, #0
20019358:	601a      	str	r2, [r3, #0]
2001935a:	605a      	str	r2, [r3, #4]
2001935c:	609a      	str	r2, [r3, #8]
2001935e:	60da      	str	r2, [r3, #12]
20019360:	611a      	str	r2, [r3, #16]
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20019362:	615a      	str	r2, [r3, #20]
20019364:	619a      	str	r2, [r3, #24]
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20019366:	61da      	str	r2, [r3, #28]
20019368:	621a      	str	r2, [r3, #32]
2001936a:	625a      	str	r2, [r3, #36]	; 0x24
2001936c:	629a      	str	r2, [r3, #40]	; 0x28
2001936e:	62da      	str	r2, [r3, #44]	; 0x2c
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20019370:	631a      	str	r2, [r3, #48]	; 0x30
20019372:	635a      	str	r2, [r3, #52]	; 0x34
static dsp::BiQuad filter_l, filter_r;
float resonance = 1.4041f;
float cutoff = 0.49f;
float z = 0.f;
float a = 0.05f;
float b = 1.f - a;
20019374:	4a05      	ldr	r2, [pc, #20]	; (2001938c <_GLOBAL__sub_I_curSampleL+0x38>)
20019376:	ed92 7a02 	vldr	s14, [r2, #8]
2001937a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
2001937e:	ee77 7ac7 	vsub.f32	s15, s15, s14
20019382:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
20019386:	4770      	bx	lr
20019388:	200193a0 	.word	0x200193a0
2001938c:	20019390 	.word	0x20019390
