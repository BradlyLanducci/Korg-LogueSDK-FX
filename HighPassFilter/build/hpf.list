
build/HPF.elf:     file format elf32-littlearm


Disassembly of section .text:

20017844 <_text_start>:

__attribute__((weak))
void _hook_process(const float *main_xn, float *main_yn,
                   const float *sub_xn, float *sub_yn,
                   uint32_t frames)
{
20017844:	4770      	bx	lr

20017846 <_hook_resume>:

}

__attribute__((weak))
void _hook_resume(void)
{
20017846:	4770      	bx	lr

}

__attribute__((weak))
void _hook_param(uint8_t index, int32_t value)
{
20017848:	4770      	bx	lr

2001784a <_hook_suspend>:
2001784a:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
2001784c:	4770      	bx	lr

2001784e <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2001784e:	4b10      	ldr	r3, [pc, #64]	; (20017890 <_entry+0x42>)
20017850:	4a10      	ldr	r2, [pc, #64]	; (20017894 <_entry+0x46>)
20017852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20017856:	4688      	mov	r8, r1
20017858:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2001785a:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
2001785c:	4293      	cmp	r3, r2
2001785e:	d002      	beq.n	20017866 <_entry+0x18>
    *(bss_p++) = 0;
20017860:	f803 1f01 	strb.w	r1, [r3, #1]!
20017864:	e7fa      	b.n	2001785c <_entry+0xe>
20017866:	4b0c      	ldr	r3, [pc, #48]	; (20017898 <_entry+0x4a>)
20017868:	4c0c      	ldr	r4, [pc, #48]	; (2001789c <_entry+0x4e>)
2001786a:	1ae4      	subs	r4, r4, r3
2001786c:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2001786e:	2500      	movs	r5, #0
20017870:	461e      	mov	r6, r3
20017872:	42a5      	cmp	r5, r4
20017874:	d005      	beq.n	20017882 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20017876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2001787a:	b103      	cbz	r3, 2001787e <_entry+0x30>
      init_p();
2001787c:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2001787e:	3501      	adds	r5, #1
20017880:	e7f7      	b.n	20017872 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20017882:	4641      	mov	r1, r8
20017884:	4638      	mov	r0, r7
20017886:	f000 f80b 	bl	200178a0 <_hook_init>
2001788a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001788e:	bf00      	nop
20017890:	20017b77 	.word	0x20017b77
20017894:	20017bbf 	.word	0x20017bbf
20017898:	20017840 	.word	0x20017840
2001789c:	20017844 	.word	0x20017844

200178a0 <_hook_init>:
static dsp::BiQuad filter_l, filter_r;
float resonance = 1.4041f;
float cutoff = 0.49f;

void MODFX_INIT(uint32_t platform, uint32_t api)
{
200178a0:	b530      	push	{r4, r5, lr}
  filter_l.flush();
  filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
200178a2:	4c2b      	ldr	r4, [pc, #172]	; (20017950 <_hook_init+0xb0>)
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float fx_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200178a4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 20017954 <_hook_init+0xb4>
200178a8:	edd4 7a00 	vldr	s15, [r4]
    const uint32_t idx = (uint32_t)idxf;
    const float y0 = tanpi_lut_f[idx];
200178ac:	492a      	ldr	r1, [pc, #168]	; (20017958 <_hook_init+0xb8>)
    /**
     * Flush internal delays
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void flush(void) {
      mZ1 = mZ2 = 0;
200178ae:	4b2b      	ldr	r3, [pc, #172]	; (2001795c <_hook_init+0xbc>)
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float fx_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200178b0:	ee27 7a87 	vmul.f32	s14, s15, s14
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
200178b4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    const uint32_t idx = (uint32_t)idxf;
200178b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    /**
     * Flush internal delays
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void flush(void) {
      mZ1 = mZ2 = 0;
200178bc:	2200      	movs	r2, #0
200178be:	ee17 0a90 	vmov	r0, s15

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200178c2:	ee06 0a90 	vmov	s13, r0
200178c6:	eef8 6a66 	vcvt.f32.u32	s13, s13
    const float y0 = tanpi_lut_f[idx];
200178ca:	eb01 0580 	add.w	r5, r1, r0, lsl #2
200178ce:	edd5 7a00 	vldr	s15, [r5]
200178d2:	619a      	str	r2, [r3, #24]
200178d4:	ee37 7a66 	vsub.f32	s14, s14, s13
200178d8:	edd5 6a01 	vldr	s13, [r5, #4]
200178dc:	615a      	str	r2, [r3, #20]
200178de:	ee76 6ae7 	vsub.f32	s13, s13, s15
  filter_r.flush();
  filter_r.mCoeffs = filter_l.mCoeffs;
200178e2:	f103 051c 	add.w	r5, r3, #28
200178e6:	eee7 7a26 	vfma.f32	s15, s14, s13
200178ea:	635a      	str	r2, [r3, #52]	; 0x34
200178ec:	631a      	str	r2, [r3, #48]	; 0x30
float cutoff = 0.49f;

void MODFX_INIT(uint32_t platform, uint32_t api)
{
  filter_l.flush();
  filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
200178ee:	edd4 6a01 	vldr	s13, [r4, #4]
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
200178f2:	ee66 5aa7 	vmul.f32	s11, s13, s15
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
200178f6:	eeb0 7a67 	vmov.f32	s14, s15
200178fa:	eea5 7aa7 	vfma.f32	s14, s11, s15
  filter_r.flush();
  filter_r.mCoeffs = filter_l.mCoeffs;
200178fe:	461c      	mov	r4, r3
20017900:	ee37 7a26 	vadd.f32	s14, s14, s13
20017904:	ee85 6a07 	vdiv.f32	s12, s10, s14
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
20017908:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
2001790c:	ee26 7a86 	vmul.f32	s14, s13, s12
20017910:	ed83 7a02 	vstr	s14, [r3, #8]
20017914:	ed83 7a00 	vstr	s14, [r3]
        ff1 = -2.f * ff0;
20017918:	ee27 7a05 	vmul.f32	s14, s14, s10
2001791c:	ed83 7a01 	vstr	s14, [r3, #4]
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017920:	eeb0 7a66 	vmov.f32	s14, s13
20017924:	ee95 7aa7 	vfnms.f32	s14, s11, s15
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017928:	eed5 7aa7 	vfnms.f32	s15, s11, s15
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
2001792c:	ee27 7a06 	vmul.f32	s14, s14, s12
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017930:	ee77 7aa6 	vadd.f32	s15, s15, s13
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017934:	ee37 7a07 	vadd.f32	s14, s14, s14
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017938:	ee67 7a86 	vmul.f32	s15, s15, s12
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
2001793c:	ed83 7a03 	vstr	s14, [r3, #12]
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017940:	edc3 7a04 	vstr	s15, [r3, #16]
20017944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
20017946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
20017948:	6823      	ldr	r3, [r4, #0]
2001794a:	602b      	str	r3, [r5, #0]
2001794c:	bd30      	pop	{r4, r5, pc}
2001794e:	bf00      	nop
20017950:	20017b70 	.word	0x20017b70
20017954:	44029cbc 	.word	0x44029cbc
20017958:	0807b504 	.word	0x0807b504
2001795c:	20017b78 	.word	0x20017b78

20017960 <_Z8absolutef>:
}

float absolute(float valf)
{
  if (valf < 0)
20017960:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
20017964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return -valf;
20017968:	bf48      	it	mi
2001796a:	eeb1 0a40 	vnegmi.f32	s0, s0
  return valf;
}
2001796e:	4770      	bx	lr

20017970 <_hook_process>:

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
20017970:	b530      	push	{r4, r5, lr}
20017972:	9d03      	ldr	r5, [sp, #12]
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
20017974:	4b27      	ldr	r3, [pc, #156]	; (20017a14 <_hook_process+0xa4>)
 for (int i = 0; i < frames; i++)
20017976:	2200      	movs	r2, #0
20017978:	42aa      	cmp	r2, r5
2001797a:	f100 0008 	add.w	r0, r0, #8
2001797e:	f101 0108 	add.w	r1, r1, #8
20017982:	d046      	beq.n	20017a12 <_hook_process+0xa2>
  {
    curSampleL = *xn++;
20017984:	ed50 6a02 	vldr	s13, [r0, #-8]
20017988:	ed93 7a00 	vldr	s14, [r3]
2001798c:	edd3 7a05 	vldr	s15, [r3, #20]
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20017990:	ed93 5a01 	vldr	s10, [r3, #4]
    curSampleR = *xn++;
20017994:	ed10 6a01 	vldr	s12, [r0, #-4]
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
20017998:	edd3 5a02 	vldr	s11, [r3, #8]
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
2001799c:	eee6 7a87 	vfma.f32	s15, s13, s14

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
 for (int i = 0; i < frames; i++)
200179a0:	3201      	adds	r2, #1
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200179a2:	ed93 7a06 	vldr	s14, [r3, #24]
  {
    curSampleL = *xn++;
    curSampleR = *xn++;

    curSampleL = filter_l.process_so(curSampleL);
200179a6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38
200179aa:	eea6 7a85 	vfma.f32	s14, s13, s10
200179ae:	ed93 5a03 	vldr	s10, [r3, #12]
200179b2:	eea7 7ac5 	vfms.f32	s14, s15, s10
200179b6:	ed93 5a08 	vldr	s10, [r3, #32]
200179ba:	ed83 7a05 	vstr	s14, [r3, #20]
      mZ2 -= mCoeffs.fb2 * acc;
200179be:	ed93 7a04 	vldr	s14, [r3, #16]
200179c2:	ee27 7a67 	vnmul.f32	s14, s14, s15
200179c6:	eea6 7aa5 	vfma.f32	s14, s13, s11
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200179ca:	edd3 6a07 	vldr	s13, [r3, #28]
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
      mZ2 -= mCoeffs.fb2 * acc;
200179ce:	ed83 7a06 	vstr	s14, [r3, #24]
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200179d2:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
200179d6:	edd3 5a09 	vldr	s11, [r3, #36]	; 0x24
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200179da:	eea6 7a26 	vfma.f32	s14, s12, s13
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200179de:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
    curSampleR = filter_r.process_so(curSampleR);
200179e2:	ed83 7a0f 	vstr	s14, [r3, #60]	; 0x3c
200179e6:	eee6 6a05 	vfma.f32	s13, s12, s10
200179ea:	ed93 5a0a 	vldr	s10, [r3, #40]	; 0x28
200179ee:	eee7 6a45 	vfms.f32	s13, s14, s10
200179f2:	edc3 6a0c 	vstr	s13, [r3, #48]	; 0x30
      mZ2 -= mCoeffs.fb2 * acc;
200179f6:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
200179fa:	ee66 6ac7 	vnmul.f32	s13, s13, s14
200179fe:	eee6 6a25 	vfma.f32	s13, s12, s11
20017a02:	edc3 6a0d 	vstr	s13, [r3, #52]	; 0x34

    *yn++ = curSampleL;
20017a06:	ed41 7a02 	vstr	s15, [r1, #-8]
    *yn++ = curSampleR;
20017a0a:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
20017a0c:	f841 4c04 	str.w	r4, [r1, #-4]

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
 for (int i = 0; i < frames; i++)
20017a10:	e7b2      	b.n	20017978 <_hook_process+0x8>
20017a12:	bd30      	pop	{r4, r5, pc}
20017a14:	20017b78 	.word	0x20017b78

20017a18 <_hook_param>:

  }
}

void MODFX_PARAM(uint8_t index, int32_t value)
{
20017a18:	b530      	push	{r4, r5, lr}
20017a1a:	ee07 1a90 	vmov	s15, r1
  const float valf = q31_to_f32(value);
  float invertedValf;
  float range = 0;
  switch (index) 
20017a1e:	2800      	cmp	r0, #0
20017a20:	f040 8082 	bne.w	20017b28 <_hook_param+0x110>
  {
  case 0:
    invertedValf = absolute(1-valf);
20017a24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
20017a28:	eef8 7ae7 	vcvt.f32.s32	s15, s15
20017a2c:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 20017b2c <_hook_param+0x114>
    range = clipminmaxf(0.001f, invertedValf, 1.f);
    cutoff = (1 / range) * 0.00046875;
20017a30:	4c3f      	ldr	r4, [pc, #252]	; (20017b30 <_hook_param+0x118>)
20017a32:	4940      	ldr	r1, [pc, #256]	; (20017b34 <_hook_param+0x11c>)
    /**
     * Flush internal delays
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void flush(void) {
      mZ1 = mZ2 = 0;
20017a34:	4b40      	ldr	r3, [pc, #256]	; (20017b38 <_hook_param+0x120>)
  float invertedValf;
  float range = 0;
  switch (index) 
  {
  case 0:
    invertedValf = absolute(1-valf);
20017a36:	eeb0 6a66 	vmov.f32	s12, s13
20017a3a:	eea7 6ac7 	vfms.f32	s12, s15, s14

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20017a3e:	2200      	movs	r2, #0
20017a40:	619a      	str	r2, [r3, #24]
20017a42:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 20017b3c <_hook_param+0x124>
20017a46:	615a      	str	r2, [r3, #20]
  filter_r.mCoeffs = filter_l.mCoeffs;
}

float absolute(float valf)
{
  if (valf < 0)
20017a48:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
20017a4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  float invertedValf;
  float range = 0;
  switch (index) 
  {
  case 0:
    invertedValf = absolute(1-valf);
20017a50:	eef0 7a46 	vmov.f32	s15, s12
}

float absolute(float valf)
{
  if (valf < 0)
    return -valf;
20017a54:	bf48      	it	mi
20017a56:	eef1 7a46 	vnegmi.f32	s15, s12
20017a5a:	ee37 6ac7 	vsub.f32	s12, s15, s14
20017a5e:	635a      	str	r2, [r3, #52]	; 0x34
20017a60:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
20017a64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20017a68:	bfb8      	it	lt
20017a6a:	eef0 7a47 	vmovlt.f32	s15, s14
20017a6e:	ee37 7ae6 	vsub.f32	s14, s15, s13
20017a72:	631a      	str	r2, [r3, #48]	; 0x30
20017a74:	eeb5 7a40 	vcmp.f32	s14, #0.0
20017a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20017a7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20017a80:	bfa8      	it	ge
20017a82:	eef0 7a47 	vmovge.f32	s15, s14
  switch (index) 
  {
  case 0:
    invertedValf = absolute(1-valf);
    range = clipminmaxf(0.001f, invertedValf, 1.f);
    cutoff = (1 / range) * 0.00046875;
20017a86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
20017a8a:	eddf 7a2d 	vldr	s15, [pc, #180]	; 20017b40 <_hook_param+0x128>
20017a8e:	ee67 7a27 	vmul.f32	s15, s14, s15
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float fx_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
20017a92:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 20017b44 <_hook_param+0x12c>
20017a96:	edc4 7a00 	vstr	s15, [r4]
20017a9a:	ee27 7a87 	vmul.f32	s14, s15, s14
    const uint32_t idx = (uint32_t)idxf;
20017a9e:	eefc 7ac7 	vcvt.u32.f32	s15, s14
20017aa2:	ee17 0a90 	vmov	r0, s15

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
20017aa6:	ee06 0a10 	vmov	s12, r0
20017aaa:	eeb8 6a46 	vcvt.f32.u32	s12, s12
    const float y0 = tanpi_lut_f[idx];
20017aae:	eb01 0580 	add.w	r5, r1, r0, lsl #2
20017ab2:	edd5 7a00 	vldr	s15, [r5]
20017ab6:	ee37 7a46 	vsub.f32	s14, s14, s12
20017aba:	ed95 6a01 	vldr	s12, [r5, #4]
20017abe:	ee36 6a67 	vsub.f32	s12, s12, s15
    filter_l.flush();
    filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
    filter_r.flush();
    filter_r.mCoeffs = filter_l.mCoeffs;
20017ac2:	f103 051c 	add.w	r5, r3, #28
20017ac6:	eee7 7a06 	vfma.f32	s15, s14, s12
  case 0:
    invertedValf = absolute(1-valf);
    range = clipminmaxf(0.001f, invertedValf, 1.f);
    cutoff = (1 / range) * 0.00046875;
    filter_l.flush();
    filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
20017aca:	ed94 6a01 	vldr	s12, [r4, #4]
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
20017ace:	ee26 5a27 	vmul.f32	s10, s12, s15
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
20017ad2:	eeb0 7a67 	vmov.f32	s14, s15
20017ad6:	eea5 7a27 	vfma.f32	s14, s10, s15
    filter_r.flush();
    filter_r.mCoeffs = filter_l.mCoeffs;
20017ada:	461c      	mov	r4, r3
20017adc:	ee37 7a06 	vadd.f32	s14, s14, s12
20017ae0:	eec6 5a87 	vdiv.f32	s11, s13, s14
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
20017ae4:	eef8 6a00 	vmov.f32	s13, #128	; 0xc0000000 -2.0
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
20017ae8:	ee26 7a25 	vmul.f32	s14, s12, s11
20017aec:	ed83 7a02 	vstr	s14, [r3, #8]
20017af0:	ed83 7a00 	vstr	s14, [r3]
        ff1 = -2.f * ff0;
20017af4:	ee27 7a26 	vmul.f32	s14, s14, s13
20017af8:	ed83 7a01 	vstr	s14, [r3, #4]
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017afc:	eeb0 7a46 	vmov.f32	s14, s12
20017b00:	ee95 7a27 	vfnms.f32	s14, s10, s15
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017b04:	eed5 7a27 	vfnms.f32	s15, s10, s15
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017b08:	ee27 7a25 	vmul.f32	s14, s14, s11
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017b0c:	ee77 7a86 	vadd.f32	s15, s15, s12
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017b10:	ee37 7a07 	vadd.f32	s14, s14, s14
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017b14:	ee67 7aa5 	vmul.f32	s15, s15, s11
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017b18:	ed83 7a03 	vstr	s14, [r3, #12]
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017b1c:	edc3 7a04 	vstr	s15, [r3, #16]
20017b20:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
20017b22:	c50f      	stmia	r5!, {r0, r1, r2, r3}
20017b24:	6823      	ldr	r3, [r4, #0]
20017b26:	602b      	str	r3, [r5, #0]
20017b28:	bd30      	pop	{r4, r5, pc}
20017b2a:	bf00      	nop
20017b2c:	30000000 	.word	0x30000000
20017b30:	20017b70 	.word	0x20017b70
20017b34:	0807b504 	.word	0x0807b504
20017b38:	20017b78 	.word	0x20017b78
20017b3c:	3a83126f 	.word	0x3a83126f
20017b40:	39f5c28f 	.word	0x39f5c28f
20017b44:	44029cbc 	.word	0x44029cbc

20017b48 <_GLOBAL__sub_I_curSampleL>:
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20017b48:	4b08      	ldr	r3, [pc, #32]	; (20017b6c <_GLOBAL__sub_I_curSampleL+0x24>)
20017b4a:	2200      	movs	r2, #0
20017b4c:	601a      	str	r2, [r3, #0]
20017b4e:	605a      	str	r2, [r3, #4]
20017b50:	609a      	str	r2, [r3, #8]
20017b52:	60da      	str	r2, [r3, #12]
20017b54:	611a      	str	r2, [r3, #16]
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20017b56:	615a      	str	r2, [r3, #20]
20017b58:	619a      	str	r2, [r3, #24]
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20017b5a:	61da      	str	r2, [r3, #28]
20017b5c:	621a      	str	r2, [r3, #32]
20017b5e:	625a      	str	r2, [r3, #36]	; 0x24
20017b60:	629a      	str	r2, [r3, #40]	; 0x28
20017b62:	62da      	str	r2, [r3, #44]	; 0x2c
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20017b64:	631a      	str	r2, [r3, #48]	; 0x30
20017b66:	635a      	str	r2, [r3, #52]	; 0x34
20017b68:	4770      	bx	lr
20017b6a:	bf00      	nop
20017b6c:	20017b78 	.word	0x20017b78
