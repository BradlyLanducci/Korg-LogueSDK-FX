
build/SimpleDelay.elf:     file format elf32-littlearm


Disassembly of section .text:

20019048 <_text_start>:
  (void)api;
}

__attribute__((weak))
void _hook_process(float *xn, uint32_t frames)
{
20019048:	4770      	bx	lr

2001904a <_hook_resume>:

}

__attribute__((weak))
void _hook_resume(void)
{
2001904a:	4770      	bx	lr

}

__attribute__((weak))
void _hook_param(uint8_t index, int32_t value)
{
2001904c:	4770      	bx	lr

2001904e <_hook_suspend>:
2001904e:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
20019050:	4770      	bx	lr

20019052 <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
20019052:	4b10      	ldr	r3, [pc, #64]	; (20019094 <_entry+0x42>)
20019054:	4a10      	ldr	r2, [pc, #64]	; (20019098 <_entry+0x46>)
20019056:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
2001905a:	4688      	mov	r8, r1
2001905c:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2001905e:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
20019060:	4293      	cmp	r3, r2
20019062:	d002      	beq.n	2001906a <_entry+0x18>
    *(bss_p++) = 0;
20019064:	f803 1f01 	strb.w	r1, [r3, #1]!
20019068:	e7fa      	b.n	20019060 <_entry+0xe>
2001906a:	4b0c      	ldr	r3, [pc, #48]	; (2001909c <_entry+0x4a>)
2001906c:	4c0c      	ldr	r4, [pc, #48]	; (200190a0 <_entry+0x4e>)
2001906e:	1ae4      	subs	r4, r4, r3
20019070:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20019072:	2500      	movs	r5, #0
20019074:	461e      	mov	r6, r3
20019076:	42a5      	cmp	r5, r4
20019078:	d005      	beq.n	20019086 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
2001907a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2001907e:	b103      	cbz	r3, 20019082 <_entry+0x30>
      init_p();
20019080:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
20019082:	3501      	adds	r5, #1
20019084:	e7f7      	b.n	20019076 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20019086:	4641      	mov	r1, r8
20019088:	4638      	mov	r0, r7
2001908a:	f000 f80b 	bl	200190a4 <_hook_init>
2001908e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20019092:	bf00      	nop
20019094:	2001929f 	.word	0x2001929f
20019098:	200192cb 	.word	0x200192cb
2001909c:	20019040 	.word	0x20019040
200190a0:	20019044 	.word	0x20019044

200190a4 <_hook_init>:
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190a4:	4a19      	ldr	r2, [pc, #100]	; (2001910c <_hook_init+0x68>)
200190a6:	4b1a      	ldr	r3, [pc, #104]	; (20019110 <_hook_init+0x6c>)
      mSize = nextpow2_u32(line_size); // must be power of 2
200190a8:	f44f 3180 	mov.w	r1, #65536	; 0x10000
float dryXN, wetXN;

float bpm;

void DELFX_INIT(uint32_t platform, uint32_t api)
{
200190ac:	b510      	push	{r4, lr}
200190ae:	6091      	str	r1, [r2, #8]
      mMask = (mSize-1);
200190b0:	f64f 71ff 	movw	r1, #65535	; 0xffff
     *
     * @note Will round size to next power of two.
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void setMemory(float *ram, size_t line_size) {
      mLine = ram;
200190b4:	6013      	str	r3, [r2, #0]
      mSize = nextpow2_u32(line_size); // must be power of 2
      mMask = (mSize-1);
200190b6:	60d1      	str	r1, [r2, #12]
200190b8:	3310      	adds	r3, #16
      mWriteIdx = 0;
200190ba:	2100      	movs	r1, #0
200190bc:	6111      	str	r1, [r2, #16]
200190be:	4614      	mov	r4, r2
200190c0:	f503 2180 	add.w	r1, r3, #262144	; 0x40000
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
    REP4(*(ptr++) = 0);
200190c4:	2200      	movs	r2, #0
200190c6:	f843 2c10 	str.w	r2, [r3, #-16]
200190ca:	f843 2c0c 	str.w	r2, [r3, #-12]
200190ce:	f843 2c08 	str.w	r2, [r3, #-8]
200190d2:	f843 2c04 	str.w	r2, [r3, #-4]
200190d6:	3310      	adds	r3, #16
static inline __attribute__((optimize("Ofast"),always_inline))
void buf_clr_f32(float * __restrict__ ptr,
                 const uint32_t len)
{
  const float *end = ptr + ((len>>2)<<2);
  for (; ptr != end; ) {
200190d8:	4299      	cmp	r1, r3
200190da:	d1f4      	bne.n	200190c6 <_hook_init+0x22>
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpmf();
200190dc:	f000 f8d8 	bl	20019290 <___fx_get_bpmf_veneer>
  s_len = (60 / bpm * BUF_SIZE) * 32;
200190e0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 20019114 <_hook_init+0x70>

void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpmf();
200190e4:	ed84 0a05 	vstr	s0, [r4, #20]
  s_len = (60 / bpm * BUF_SIZE) * 32;
200190e8:	eec7 7a00 	vdiv.f32	s15, s14, s0
  s_mix = .5f;
200190ec:	f04f 537c 	mov.w	r3, #1056964608	; 0x3f000000
200190f0:	61e3      	str	r3, [r4, #28]
void DELFX_INIT(uint32_t platform, uint32_t api)
{
  s_delay.setMemory(s_delay_ram, BUF_SIZE);  
  s_delay.clear();
  bpm = _fx_get_bpmf();
  s_len = (60 / bpm * BUF_SIZE) * 32;
200190f2:	ed9f 7a09 	vldr	s14, [pc, #36]	; 20019118 <_hook_init+0x74>
200190f6:	ee67 7a87 	vmul.f32	s15, s15, s14
200190fa:	ed9f 7a08 	vldr	s14, [pc, #32]	; 2001911c <_hook_init+0x78>
200190fe:	ee67 7a87 	vmul.f32	s15, s15, s14
20019102:	eefc 7ae7 	vcvt.u32.f32	s15, s15
20019106:	edc4 7a06 	vstr	s15, [r4, #24]
  s_mix = .5f;
2001910a:	bd10      	pop	{r4, pc}
2001910c:	200192a0 	.word	0x200192a0
20019110:	c0420000 	.word	0xc0420000
20019114:	42700000 	.word	0x42700000
20019118:	473b8000 	.word	0x473b8000
2001911c:	42000000 	.word	0x42000000

20019120 <_hook_process>:
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
  const float dry = 1.f - s_mix;
20019120:	4b1b      	ldr	r3, [pc, #108]	; (20019190 <_hook_process+0x70>)
  s_len = (60 / bpm * BUF_SIZE) * 32;
  s_mix = .5f;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
20019122:	b5f0      	push	{r4, r5, r6, r7, lr}
  const float wet = s_mix;
  

  for (int i=0;i<frames*2;i++)
  {
    const float delSample = gain * s_delay.read(s_len);
20019124:	699a      	ldr	r2, [r3, #24]
  s_mix = .5f;
}

void DELFX_PROCESS(float *xn, uint32_t frames)
{
  const float dry = 1.f - s_mix;
20019126:	edd3 6a07 	vldr	s13, [r3, #28]
     * @param pos Offset from write index
     * @return Sample at given position from write index
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float read(const uint32_t pos) {
      return mLine[(mWriteIdx + pos) & mMask];
2001912a:	681e      	ldr	r6, [r3, #0]
2001912c:	68df      	ldr	r7, [r3, #12]
  const float wet = s_mix;
  

  for (int i=0;i<frames*2;i++)
  {
    const float delSample = gain * s_delay.read(s_len);
2001912e:	ed93 6a08 	vldr	s12, [r3, #32]
{
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  

  for (int i=0;i<frames*2;i++)
20019132:	ea4f 0e41 	mov.w	lr, r1, lsl #1
20019136:	6919      	ldr	r1, [r3, #16]
20019138:	2400      	movs	r4, #0
2001913a:	eb02 0c01 	add.w	ip, r2, r1
2001913e:	4574      	cmp	r4, lr
20019140:	eba1 0204 	sub.w	r2, r1, r4
20019144:	d021      	beq.n	2001918a <_hook_process+0x6a>
20019146:	ebc4 050c 	rsb	r5, r4, ip
2001914a:	403d      	ands	r5, r7
2001914c:	eb06 0585 	add.w	r5, r6, r5, lsl #2
  {
    const float delSample = gain * s_delay.read(s_len);
20019150:	edd5 7a00 	vldr	s15, [r5]
    dryXN = xn[i];
20019154:	ed90 7a00 	vldr	s14, [r0]
  const float wet = s_mix;
  

  for (int i=0;i<frames*2;i++)
  {
    const float delSample = gain * s_delay.read(s_len);
20019158:	ee66 7a27 	vmul.f32	s15, s12, s15
    dryXN = xn[i];
2001915c:	ed83 7a09 	vstr	s14, [r3, #36]	; 0x24
    wetXN = wet * delSample;
20019160:	ee66 7aa7 	vmul.f32	s15, s13, s15
     *
     * @param s Sample to write
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void write(const float s) {
      mLine[(mWriteIdx--) & mMask] = s;
20019164:	403a      	ands	r2, r7
20019166:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28
    xn[i] = dryXN + wetXN;
2001916a:	ee77 7a27 	vadd.f32	s15, s14, s15
2001916e:	eb06 0282 	add.w	r2, r6, r2, lsl #2
20019172:	ece0 7a01 	vstmia	r0!, {s15}
20019176:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
2001917a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
2001917e:	ee77 7a87 	vadd.f32	s15, s15, s14
{
  const float dry = 1.f - s_mix;
  const float wet = s_mix;
  

  for (int i=0;i<frames*2;i++)
20019182:	3401      	adds	r4, #1
20019184:	edc2 7a00 	vstr	s15, [r2]
20019188:	e7d9      	b.n	2001913e <_hook_process+0x1e>
2001918a:	611a      	str	r2, [r3, #16]
2001918c:	bdf0      	pop	{r4, r5, r6, r7, pc}
2001918e:	bf00      	nop
20019190:	200192a0 	.word	0x200192a0

20019194 <_hook_param>:
    s_delay.write(dryXN + wetXN);
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
20019194:	b508      	push	{r3, lr}
20019196:	ed2d 8b02 	vpush	{d8}
  const float valf = q31_to_f32(value);
2001919a:	ee08 1a10 	vmov	s16, r1
  switch (index) {
2001919e:	2801      	cmp	r0, #1
  }
}

void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
200191a0:	eeba 8ae0 	vcvt.f32.s32	s16, s16, #31
  switch (index) {
200191a4:	d011      	beq.n	200191ca <_hook_param+0x36>
200191a6:	d305      	bcc.n	200191b4 <_hook_param+0x20>
200191a8:	2803      	cmp	r0, #3
200191aa:	d158      	bne.n	2001925e <_hook_param+0xca>
      s_len = (60 / bpm * BUF_SIZE) * 4;
    }
    break;

  case 3:
    s_mix = valf;
200191ac:	4b2d      	ldr	r3, [pc, #180]	; (20019264 <_hook_param+0xd0>)
200191ae:	ed83 8a07 	vstr	s16, [r3, #28]
    break;
  default:
    break;
  }
200191b2:	e054      	b.n	2001925e <_hook_param+0xca>
void DELFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
  switch (index) {
  case 0:
    if (valf == 0.f) gain = 0.1f;
200191b4:	eeb5 8a40 	vcmp.f32	s16, #0.0
200191b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200191bc:	4b29      	ldr	r3, [pc, #164]	; (20019264 <_hook_param+0xd0>)
200191be:	bf06      	itte	eq
200191c0:	4a29      	ldreq	r2, [pc, #164]	; (20019268 <_hook_param+0xd4>)
200191c2:	621a      	streq	r2, [r3, #32]
    else gain = valf;
200191c4:	ed83 8a08 	vstrne	s16, [r3, #32]
200191c8:	e049      	b.n	2001925e <_hook_param+0xca>
    break;
  case 1:

    bpm = _fx_get_bpm();
200191ca:	f000 f865 	bl	20019298 <___fx_get_bpm_veneer>
200191ce:	ee07 0a90 	vmov	s15, r0
200191d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
    if (valf < 0.25) 
200191d6:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
200191da:	eeb4 8ae7 	vcmpe.f32	s16, s15
    if (valf == 0.f) gain = 0.1f;
    else gain = valf;
    break;
  case 1:

    bpm = _fx_get_bpm();
200191de:	4b21      	ldr	r3, [pc, #132]	; (20019264 <_hook_param+0xd0>)
200191e0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 2001926c <_hook_param+0xd8>
200191e4:	edc3 6a05 	vstr	s13, [r3, #20]
    if (valf < 0.25) 
200191e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
200191ec:	eddf 7a20 	vldr	s15, [pc, #128]	; 20019270 <_hook_param+0xdc>
200191f0:	d50c      	bpl.n	2001920c <_hook_param+0x78>
    {
      s_len = (60 / bpm * BUF_SIZE) * 32;
200191f2:	ee86 7a26 	vdiv.f32	s14, s12, s13
200191f6:	ee67 7a27 	vmul.f32	s15, s14, s15
200191fa:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 20019274 <_hook_param+0xe0>
200191fe:	ee67 7a87 	vmul.f32	s15, s15, s14
20019202:	eefc 7ae7 	vcvt.u32.f32	s15, s15
20019206:	edc3 7a06 	vstr	s15, [r3, #24]
2001920a:	e028      	b.n	2001925e <_hook_param+0xca>
    } 
    else if (valf < 0.5) 
2001920c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
20019210:	eeb4 8ac7 	vcmpe.f32	s16, s14
20019214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20019218:	d50c      	bpl.n	20019234 <_hook_param+0xa0>
    {
      s_len = (60 / bpm * BUF_SIZE) * 16;
2001921a:	ee86 7a26 	vdiv.f32	s14, s12, s13
2001921e:	ee67 7a27 	vmul.f32	s15, s14, s15
20019222:	eeb3 7a00 	vmov.f32	s14, #48	; 0x41800000  16.0
20019226:	ee67 7a87 	vmul.f32	s15, s15, s14
2001922a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2001922e:	edc3 7a06 	vstr	s15, [r3, #24]
20019232:	e014      	b.n	2001925e <_hook_param+0xca>
    } 
    else if (valf < 0.75) 
20019234:	eeb6 7a08 	vmov.f32	s14, #104	; 0x3f400000  0.750
20019238:	eeb4 8ac7 	vcmpe.f32	s16, s14
    {
      s_len = (60 / bpm * BUF_SIZE) * 8;
2001923c:	ee86 7a26 	vdiv.f32	s14, s12, s13
    } 
    else if (valf < 0.5) 
    {
      s_len = (60 / bpm * BUF_SIZE) * 16;
    } 
    else if (valf < 0.75) 
20019240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    {
      s_len = (60 / bpm * BUF_SIZE) * 8;
20019244:	ee67 7a27 	vmul.f32	s15, s14, s15
20019248:	bf4c      	ite	mi
2001924a:	eeb2 7a00 	vmovmi.f32	s14, #32	; 0x41000000  8.0
    } 
    else 
    {
      s_len = (60 / bpm * BUF_SIZE) * 4;
2001924e:	eeb1 7a00 	vmovpl.f32	s14, #16	; 0x40800000  4.0
20019252:	ee67 7a87 	vmul.f32	s15, s15, s14
20019256:	eefc 7ae7 	vcvt.u32.f32	s15, s15
2001925a:	edc3 7a06 	vstr	s15, [r3, #24]
    s_mix = valf;
    break;
  default:
    break;
  }
2001925e:	ecbd 8b02 	vpop	{d8}
20019262:	bd08      	pop	{r3, pc}
20019264:	200192a0 	.word	0x200192a0
20019268:	3dcccccd 	.word	0x3dcccccd
2001926c:	42700000 	.word	0x42700000
20019270:	473b8000 	.word	0x473b8000
20019274:	42000000 	.word	0x42000000

20019278 <_GLOBAL__sub_I_s_len>:
    DelayLine(void) :
      mLine(0),
      mFracZ(0),
      mSize(0),
      mMask(0),
      mWriteIdx(0)
20019278:	4b04      	ldr	r3, [pc, #16]	; (2001928c <_GLOBAL__sub_I_s_len+0x14>)
2001927a:	2200      	movs	r2, #0
2001927c:	2100      	movs	r1, #0
2001927e:	601a      	str	r2, [r3, #0]
20019280:	6059      	str	r1, [r3, #4]
20019282:	609a      	str	r2, [r3, #8]
20019284:	60da      	str	r2, [r3, #12]
20019286:	611a      	str	r2, [r3, #16]
20019288:	4770      	bx	lr
2001928a:	bf00      	nop
2001928c:	200192a0 	.word	0x200192a0

20019290 <___fx_get_bpmf_veneer>:
20019290:	f85f f000 	ldr.w	pc, [pc]	; 20019294 <___fx_get_bpmf_veneer+0x4>
20019294:	0807ca8d 	.word	0x0807ca8d

20019298 <___fx_get_bpm_veneer>:
20019298:	f85f f000 	ldr.w	pc, [pc]	; 2001929c <___fx_get_bpm_veneer+0x4>
2001929c:	0807ca89 	.word	0x0807ca89
