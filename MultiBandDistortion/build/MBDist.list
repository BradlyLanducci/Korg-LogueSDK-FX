
build/MBDist.elf:     file format elf32-littlearm


Disassembly of section .text:

20017844 <_text_start>:

__attribute__((weak))
void _hook_process(const float *main_xn, float *main_yn,
                   const float *sub_xn, float *sub_yn,
                   uint32_t frames)
{
20017844:	4770      	bx	lr

20017846 <_hook_resume>:

}

__attribute__((weak))
void _hook_resume(void)
{
20017846:	4770      	bx	lr

}

__attribute__((weak))
void _hook_param(uint8_t index, int32_t value)
{
20017848:	4770      	bx	lr

2001784a <_hook_suspend>:
2001784a:	4770      	bx	lr
  _hook_init(platform, api);
}

__attribute__((weak))
void _hook_init(uint32_t platform, uint32_t api)
{
2001784c:	4770      	bx	lr

2001784e <_entry>:
 * @{
 */

__attribute__((used))
void _entry(uint32_t platform, uint32_t api)
{
2001784e:	4b10      	ldr	r3, [pc, #64]	; (20017890 <_entry+0x42>)
20017850:	4a10      	ldr	r2, [pc, #64]	; (20017894 <_entry+0x46>)
20017852:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
20017856:	4688      	mov	r8, r1
20017858:	4607      	mov	r7, r0
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
    *(bss_p++) = 0;
2001785a:	2100      	movs	r1, #0
{
  // Ensure zero-clear BSS segment
  uint8_t * __restrict bss_p = (uint8_t *)&_bss_start;
  const uint8_t * const bss_e = (uint8_t *)&_bss_end;

  for (; bss_p != bss_e;)
2001785c:	4293      	cmp	r3, r2
2001785e:	d002      	beq.n	20017866 <_entry+0x18>
    *(bss_p++) = 0;
20017860:	f803 1f01 	strb.w	r1, [r3, #1]!
20017864:	e7fa      	b.n	2001785c <_entry+0xe>
20017866:	4b0c      	ldr	r3, [pc, #48]	; (20017898 <_entry+0x4a>)
20017868:	4c0c      	ldr	r4, [pc, #48]	; (2001789c <_entry+0x4e>)
2001786a:	1ae4      	subs	r4, r4, r3
2001786c:	10a4      	asrs	r4, r4, #2

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2001786e:	2500      	movs	r5, #0
20017870:	461e      	mov	r6, r3
20017872:	42a5      	cmp	r5, r4
20017874:	d005      	beq.n	20017882 <_entry+0x34>
    __init_fptr init_p = (__init_fptr)__init_array_start[i];
20017876:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
    if (init_p != NULL)
2001787a:	b103      	cbz	r3, 2001787e <_entry+0x30>
      init_p();
2001787c:	4798      	blx	r3
  for (; bss_p != bss_e;)
    *(bss_p++) = 0;

  // Call constructors if any.  
  const size_t count = __init_array_end - __init_array_start;
  for (size_t i = 0; i<count; ++i) {
2001787e:	3501      	adds	r5, #1
20017880:	e7f7      	b.n	20017872 <_entry+0x24>
    if (init_p != NULL)
      init_p();
  }
  
  // Call user initialization
  _hook_init(platform, api);
20017882:	4641      	mov	r1, r8
20017884:	4638      	mov	r0, r7
20017886:	f000 f80b 	bl	200178a0 <_hook_init>
2001788a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
2001788e:	bf00      	nop
20017890:	20017b1f 	.word	0x20017b1f
20017894:	20017b67 	.word	0x20017b67
20017898:	20017840 	.word	0x20017840
2001789c:	20017844 	.word	0x20017844

200178a0 <_hook_init>:
float z = 0.f;
float a = 0.05f;
float b = 1.f - a;

void MODFX_INIT(uint32_t platform, uint32_t api)
{
200178a0:	b530      	push	{r4, r5, lr}
  filter_l.flush();
  filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
200178a2:	4c2b      	ldr	r4, [pc, #172]	; (20017950 <_hook_init+0xb0>)
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float fx_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200178a4:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 20017954 <_hook_init+0xb4>
200178a8:	edd4 7a00 	vldr	s15, [r4]
    const uint32_t idx = (uint32_t)idxf;
    const float y0 = tanpi_lut_f[idx];
200178ac:	492a      	ldr	r1, [pc, #168]	; (20017958 <_hook_init+0xb8>)
    /**
     * Flush internal delays
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void flush(void) {
      mZ1 = mZ2 = 0;
200178ae:	4b2b      	ldr	r3, [pc, #172]	; (2001795c <_hook_init+0xbc>)
   * @param   x  Value in [0.0001, 0.49].
   * @return     Result of tan(pi*x).
   * @note Not checking input, caller responsible for bounding x.
   */
  __fast_inline float fx_tanpif(float x) {
    const float idxf = x * k_tanpi_range_recip * k_tanpi_size;
200178b0:	ee27 7a87 	vmul.f32	s14, s15, s14
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
200178b4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
    const uint32_t idx = (uint32_t)idxf;
200178b8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
    /**
     * Flush internal delays
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    void flush(void) {
      mZ1 = mZ2 = 0;
200178bc:	2200      	movs	r2, #0
200178be:	ee17 0a90 	vmov	r0, s15

/** Linear interpolation
 */
static inline __attribute__((optimize("Ofast"), always_inline))
float linintf(const float fr, const float x0, const float x1) {
  return x0 + fr * (x1 - x0);
200178c2:	ee06 0a90 	vmov	s13, r0
200178c6:	eef8 6a66 	vcvt.f32.u32	s13, s13
    const float y0 = tanpi_lut_f[idx];
200178ca:	eb01 0580 	add.w	r5, r1, r0, lsl #2
200178ce:	edd5 7a00 	vldr	s15, [r5]
200178d2:	619a      	str	r2, [r3, #24]
200178d4:	ee37 7a66 	vsub.f32	s14, s14, s13
200178d8:	edd5 6a01 	vldr	s13, [r5, #4]
200178dc:	615a      	str	r2, [r3, #20]
200178de:	ee76 6ae7 	vsub.f32	s13, s13, s15
  filter_r.flush();
  filter_r.mCoeffs = filter_l.mCoeffs;
200178e2:	f103 051c 	add.w	r5, r3, #28
200178e6:	eee7 7a26 	vfma.f32	s15, s14, s13
200178ea:	635a      	str	r2, [r3, #52]	; 0x34
200178ec:	631a      	str	r2, [r3, #48]	; 0x30
float b = 1.f - a;

void MODFX_INIT(uint32_t platform, uint32_t api)
{
  filter_l.flush();
  filter_l.mCoeffs.setSOHP(fx_tanpif(cutoff), resonance);
200178ee:	edd4 6a01 	vldr	s13, [r4, #4]
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
200178f2:	ee66 5aa7 	vmul.f32	s11, s13, s15
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
200178f6:	eeb0 7a67 	vmov.f32	s14, s15
200178fa:	eea5 7aa7 	vfma.f32	s14, s11, s15
  filter_r.flush();
  filter_r.mCoeffs = filter_l.mCoeffs;
200178fe:	461c      	mov	r4, r3
20017900:	ee37 7a26 	vadd.f32	s14, s14, s13
20017904:	ee85 6a07 	vdiv.f32	s12, s10, s14
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
20017908:	eeb8 5a00 	vmov.f32	s10, #128	; 0xc0000000 -2.0
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
2001790c:	ee26 7a86 	vmul.f32	s14, s13, s12
20017910:	ed83 7a02 	vstr	s14, [r3, #8]
20017914:	ed83 7a00 	vstr	s14, [r3]
        ff1 = -2.f * ff0;
20017918:	ee27 7a05 	vmul.f32	s14, s14, s10
2001791c:	ed83 7a01 	vstr	s14, [r3, #4]
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017920:	eeb0 7a66 	vmov.f32	s14, s13
20017924:	ee95 7aa7 	vfnms.f32	s14, s11, s15
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017928:	eed5 7aa7 	vfnms.f32	s15, s11, s15
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
2001792c:	ee27 7a06 	vmul.f32	s14, s14, s12
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017930:	ee77 7aa6 	vadd.f32	s15, s15, s13
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017934:	ee37 7a07 	vadd.f32	s14, s14, s14
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017938:	ee67 7a86 	vmul.f32	s15, s15, s12
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
2001793c:	ed83 7a03 	vstr	s14, [r3, #12]
        fb2 = (qk2 - k + q) * qk2_k_q_r;
20017940:	edc3 7a04 	vstr	s15, [r3, #16]
20017944:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
20017946:	c50f      	stmia	r5!, {r0, r1, r2, r3}
20017948:	6823      	ldr	r3, [r4, #0]
2001794a:	602b      	str	r3, [r5, #0]
2001794c:	bd30      	pop	{r4, r5, pc}
2001794e:	bf00      	nop
20017950:	20017b10 	.word	0x20017b10
20017954:	44029cbc 	.word	0x44029cbc
20017958:	0807b504 	.word	0x0807b504
2001795c:	20017b20 	.word	0x20017b20

20017960 <_Z8absolutef>:
}

float absolute(float valf)
{
  if (valf < 0)
20017960:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
20017964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return -valf;
20017968:	bf48      	it	mi
2001796a:	eeb1 0a40 	vnegmi.f32	s0, s0
  return valf;
}
2001796e:	4770      	bx	lr

20017970 <_hook_process>:

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
20017970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 for (int i = 0; i < frames; i++)
  {
    curSampleL = *xn++;
    curSampleR = *xn++;

    filter_l.mCoeffs.setSOHP(cutoff, resonance);
20017974:	4f3b      	ldr	r7, [pc, #236]	; (20017a64 <_hook_process+0xf4>)
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
20017976:	4c3c      	ldr	r4, [pc, #240]	; (20017a68 <_hook_process+0xf8>)
20017978:	4684      	mov	ip, r0
2001797a:	468e      	mov	lr, r1

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
 for (int i = 0; i < frames; i++)
2001797c:	f04f 0800 	mov.w	r8, #0
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
20017980:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
20017984:	eeb8 3a00 	vmov.f32	s6, #128	; 0xc0000000 -2.0
20017988:	9b06      	ldr	r3, [sp, #24]
2001798a:	4598      	cmp	r8, r3
2001798c:	f10c 0c08 	add.w	ip, ip, #8
20017990:	f10e 0e08 	add.w	lr, lr, #8
20017994:	d064      	beq.n	20017a60 <_hook_process+0xf0>
  {
    curSampleL = *xn++;
    curSampleR = *xn++;

    filter_l.mCoeffs.setSOHP(cutoff, resonance);
20017996:	ed97 6a01 	vldr	s12, [r7, #4]
2001799a:	edd7 7a00 	vldr	s15, [r7]
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
 for (int i = 0; i < frames; i++)
  {
    curSampleL = *xn++;
2001799e:	ed1c 5a02 	vldr	s10, [ip, #-8]
    curSampleR = *xn++;
200179a2:	ed5c 4a01 	vldr	s9, [ip, #-4]

    filter_l.mCoeffs.setSOHP(cutoff, resonance);
    filter_r.mCoeffs = filter_l.mCoeffs;
200179a6:	4d31      	ldr	r5, [pc, #196]	; (20017a6c <_hook_process+0xfc>)
       */
      inline __attribute__((optimize("Ofast"),always_inline))
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
200179a8:	ee67 3a86 	vmul.f32	s7, s15, s12
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
200179ac:	eeb0 7a67 	vmov.f32	s14, s15
200179b0:	eea7 7aa3 	vfma.f32	s14, s15, s7
200179b4:	f1a5 061c 	sub.w	r6, r5, #28

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
 for (int i = 0; i < frames; i++)
200179b8:	f108 0801 	add.w	r8, r8, #1
200179bc:	ee37 7a06 	vadd.f32	s14, s14, s12
200179c0:	eec2 5a87 	vdiv.f32	s11, s5, s14
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
200179c4:	eeb0 7a46 	vmov.f32	s14, s12
200179c8:	ee97 7aa3 	vfnms.f32	s14, s15, s7
        fb2 = (qk2 - k + q) * qk2_k_q_r;
200179cc:	eed7 7aa3 	vfnms.f32	s15, s15, s7
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
200179d0:	ee66 6a25 	vmul.f32	s13, s12, s11
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
        fb2 = (qk2 - k + q) * qk2_k_q_r;
200179d4:	ee77 7a86 	vadd.f32	s15, s15, s12
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
200179d8:	ee26 4a83 	vmul.f32	s8, s13, s6
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
        fb2 = (qk2 - k + q) * qk2_k_q_r;
200179dc:	ee67 7aa5 	vmul.f32	s15, s15, s11
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200179e0:	ed94 6a05 	vldr	s12, [r4, #20]
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
        fb2 = (qk2 - k + q) * qk2_k_q_r;
200179e4:	edc4 7a04 	vstr	s15, [r4, #16]
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
200179e8:	ee27 7a25 	vmul.f32	s14, s14, s11
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200179ec:	edd4 5a06 	vldr	s11, [r4, #24]
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
200179f0:	edc4 6a02 	vstr	s13, [r4, #8]
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
200179f4:	eea5 6a26 	vfma.f32	s12, s10, s13
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
200179f8:	eee5 5a04 	vfma.f32	s11, s10, s8
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
200179fc:	ee37 7a07 	vadd.f32	s14, s14, s14
      void setSOHP(const float k, const float q) {
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
20017a00:	edc4 6a00 	vstr	s13, [r4]
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20017a04:	eee6 5a47 	vfms.f32	s11, s12, s14
        // k = tan(pi*wc)
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
20017a08:	ed84 4a01 	vstr	s8, [r4, #4]
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20017a0c:	edc4 5a05 	vstr	s11, [r4, #20]
      mZ2 -= mCoeffs.fb2 * acc;
20017a10:	ee67 5ac6 	vnmul.f32	s11, s15, s12
        // flat response at q = sqrt(2)
        const float qk2 = q * k * k;
        const float qk2_k_q_r = 1.f / (qk2 + k + q);
        ff0 = ff2 = q * qk2_k_q_r;
        ff1 = -2.f * ff0;
        fb1 = 2.f * (qk2 - q) * qk2_k_q_r;
20017a14:	ed84 7a03 	vstr	s14, [r4, #12]
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
      mZ2 -= mCoeffs.fb2 * acc;
20017a18:	eee5 5a26 	vfma.f32	s11, s10, s13
  {
    curSampleL = *xn++;
    curSampleR = *xn++;

    filter_l.mCoeffs.setSOHP(cutoff, resonance);
    filter_r.mCoeffs = filter_l.mCoeffs;
20017a1c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
20017a1e:	edc4 5a06 	vstr	s11, [r4, #24]
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
20017a22:	edd4 5a0c 	vldr	s11, [r4, #48]	; 0x30
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20017a26:	ed94 5a0d 	vldr	s10, [r4, #52]	; 0x34

    curSampleL = filter_l.process_so(curSampleL);
20017a2a:	ed84 6a0e 	vstr	s12, [r4, #56]	; 0x38
     *
     * @return Output sample
     */
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
20017a2e:	eee4 5aa6 	vfma.f32	s11, s9, s13
  {
    curSampleL = *xn++;
    curSampleR = *xn++;

    filter_l.mCoeffs.setSOHP(cutoff, resonance);
    filter_r.mCoeffs = filter_l.mCoeffs;
20017a32:	c50f      	stmia	r5!, {r0, r1, r2, r3}
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20017a34:	eea4 5a84 	vfma.f32	s10, s9, s8
20017a38:	6833      	ldr	r3, [r6, #0]
20017a3a:	602b      	str	r3, [r5, #0]
      mZ2 -= mCoeffs.fb2 * acc;
20017a3c:	ee67 7ae5 	vnmul.f32	s15, s15, s11
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20017a40:	eea5 5ac7 	vfms.f32	s10, s11, s14
      mZ2 -= mCoeffs.fb2 * acc;
20017a44:	eee4 7aa6 	vfma.f32	s15, s9, s13

    curSampleL = filter_l.process_so(curSampleL);
    curSampleR = filter_r.process_so(curSampleR);
20017a48:	edc4 5a0f 	vstr	s11, [r4, #60]	; 0x3c
    inline __attribute__((optimize("Ofast"),always_inline))
    float process_so(const float xn) {
      float acc = mCoeffs.ff0 * xn + mZ1;
      mZ1 = mCoeffs.ff1 * xn + mZ2;
      mZ2 = mCoeffs.ff2 * xn;
      mZ1 -= mCoeffs.fb1 * acc;
20017a4c:	ed84 5a0c 	vstr	s10, [r4, #48]	; 0x30
      mZ2 -= mCoeffs.fb2 * acc;
20017a50:	edc4 7a0d 	vstr	s15, [r4, #52]	; 0x34

    *yn++ = curSampleL;
20017a54:	ed0e 6a02 	vstr	s12, [lr, #-8]
    *yn++ = curSampleR;
20017a58:	6be3      	ldr	r3, [r4, #60]	; 0x3c
20017a5a:	f84e 3c04 	str.w	r3, [lr, #-4]

void MODFX_PROCESS(const float *xn, float *yn,
                     const float *sub_xn, float *sub_yn,
                     uint32_t frames)
{
 for (int i = 0; i < frames; i++)
20017a5e:	e793      	b.n	20017988 <_hook_process+0x18>
20017a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
20017a64:	20017b10 	.word	0x20017b10
20017a68:	20017b20 	.word	0x20017b20
20017a6c:	20017b3c 	.word	0x20017b3c

20017a70 <_hook_param>:
  z = (in * b) + (z * a);
  return z;
}

void MODFX_PARAM(uint8_t index, int32_t value)
{
20017a70:	ee07 1a90 	vmov	s15, r1
  const float valf = q31_to_f32(value);
  float invertedValf;
  float range = 0;
  switch (index) 
20017a74:	bb10      	cbnz	r0, 20017abc <_hook_param+0x4c>

/** FSEL construct
 */
static inline __attribute__((optimize("Ofast"),always_inline))
float fsel(const float a, const float b, const float c) {
  return (a >= 0) ? b : c;
20017a76:	ed9f 7a12 	vldr	s14, [pc, #72]	; 20017ac0 <_hook_param+0x50>
  {
  case 0:
    // 20 to 20000hz HPF
    range = clipminmaxf(0.00041666f, valf, 1.f);
    cutoff = range * 20000.f;
    cutoff = cutoff * k_samplerate_recipf;
20017a7a:	4b12      	ldr	r3, [pc, #72]	; (20017ac4 <_hook_param+0x54>)
  return z;
}

void MODFX_PARAM(uint8_t index, int32_t value)
{
  const float valf = q31_to_f32(value);
20017a7c:	eefa 7ae0 	vcvt.f32.s32	s15, s15, #31
20017a80:	ee77 6ac7 	vsub.f32	s13, s15, s14
20017a84:	eef5 6ac0 	vcmpe.f32	s13, #0.0
20017a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20017a8c:	bfb8      	it	lt
20017a8e:	eef0 7a47 	vmovlt.f32	s15, s14
20017a92:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
20017a96:	ee77 6ac7 	vsub.f32	s13, s15, s14
20017a9a:	eef5 6a40 	vcmp.f32	s13, #0.0
20017a9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
20017aa2:	bfa8      	it	ge
20017aa4:	eef0 7a47 	vmovge.f32	s15, s14
  {
  case 0:
    // 20 to 20000hz HPF
    range = clipminmaxf(0.00041666f, valf, 1.f);
    cutoff = range * 20000.f;
    cutoff = cutoff * k_samplerate_recipf;
20017aa8:	ed9f 7a07 	vldr	s14, [pc, #28]	; 20017ac8 <_hook_param+0x58>
20017aac:	ee67 7a87 	vmul.f32	s15, s15, s14
20017ab0:	ed9f 7a06 	vldr	s14, [pc, #24]	; 20017acc <_hook_param+0x5c>
20017ab4:	ee67 7a87 	vmul.f32	s15, s15, s14
20017ab8:	edc3 7a00 	vstr	s15, [r3]
20017abc:	4770      	bx	lr
20017abe:	bf00      	nop
20017ac0:	39da7329 	.word	0x39da7329
20017ac4:	20017b10 	.word	0x20017b10
20017ac8:	469c4000 	.word	0x469c4000
20017acc:	37aec33e 	.word	0x37aec33e

20017ad0 <_GLOBAL__sub_I_curSampleL>:
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20017ad0:	4b0c      	ldr	r3, [pc, #48]	; (20017b04 <_GLOBAL__sub_I_curSampleL+0x34>)
20017ad2:	2200      	movs	r2, #0
20017ad4:	601a      	str	r2, [r3, #0]
20017ad6:	605a      	str	r2, [r3, #4]
20017ad8:	609a      	str	r2, [r3, #8]
20017ada:	60da      	str	r2, [r3, #12]
20017adc:	611a      	str	r2, [r3, #16]
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20017ade:	615a      	str	r2, [r3, #20]
20017ae0:	619a      	str	r2, [r3, #24]
      /**
       * Default constructor
       */
      Coeffs() :
        ff0(0), ff1(0), ff2(0),
        fb1(0), fb2(0)
20017ae2:	61da      	str	r2, [r3, #28]
20017ae4:	621a      	str	r2, [r3, #32]
20017ae6:	625a      	str	r2, [r3, #36]	; 0x24
20017ae8:	629a      	str	r2, [r3, #40]	; 0x28
20017aea:	62da      	str	r2, [r3, #44]	; 0x2c
    /*=====================================================================*/

    /**
     * Default constructor
     */
    BiQuad(void) : mZ1(0), mZ2(0)
20017aec:	631a      	str	r2, [r3, #48]	; 0x30
20017aee:	635a      	str	r2, [r3, #52]	; 0x34
static dsp::BiQuad filter_l, filter_r;
float resonance = 1.414f;
float cutoff = 0.49f; 
float z = 0.f;
float a = 0.05f;
float b = 1.f - a;
20017af0:	4a05      	ldr	r2, [pc, #20]	; (20017b08 <_GLOBAL__sub_I_curSampleL+0x38>)
20017af2:	ed92 7a02 	vldr	s14, [r2, #8]
20017af6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
20017afa:	ee77 7ac7 	vsub.f32	s15, s15, s14
20017afe:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
20017b02:	4770      	bx	lr
20017b04:	20017b20 	.word	0x20017b20
20017b08:	20017b10 	.word	0x20017b10
